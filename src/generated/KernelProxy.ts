/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common'

export interface KernelProxyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'proxyType'
      | 'apps'
      | 'isDepositable'
      | 'implementation'
      | 'recoveryVaultAppId'
  ): FunctionFragment

  getEvent(nameOrSignatureOrTopic: 'ProxyDeposit' | 'SetApp'): EventFragment

  encodeFunctionData(functionFragment: 'proxyType', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'apps',
    values: [BytesLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'isDepositable',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'implementation',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'recoveryVaultAppId',
    values?: undefined
  ): string

  decodeFunctionResult(functionFragment: 'proxyType', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'apps', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isDepositable',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'implementation',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'recoveryVaultAppId',
    data: BytesLike
  ): Result
}

export namespace ProxyDepositEvent {
  export type InputTuple = [sender: AddressLike, value: BigNumberish]
  export type OutputTuple = [sender: string, value: bigint]
  export interface OutputObject {
    sender: string
    value: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SetAppEvent {
  export type InputTuple = [
    namespace_: BytesLike,
    appId: BytesLike,
    app: AddressLike
  ]
  export type OutputTuple = [namespace_: string, appId: string, app: string]
  export interface OutputObject {
    namespace: string
    appId: string
    app: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface KernelProxy extends BaseContract {
  connect(runner?: ContractRunner | null): KernelProxy
  waitForDeployment(): Promise<this>

  interface: KernelProxyInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>

  proxyType: TypedContractMethod<[], [bigint], 'view'>

  apps: TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [string],
    'view'
  >

  isDepositable: TypedContractMethod<[], [boolean], 'view'>

  implementation: TypedContractMethod<[], [string], 'view'>

  recoveryVaultAppId: TypedContractMethod<[], [string], 'view'>

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T

  getFunction(
    nameOrSignature: 'proxyType'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'apps'
  ): TypedContractMethod<[arg0: BytesLike, arg1: BytesLike], [string], 'view'>
  getFunction(
    nameOrSignature: 'isDepositable'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'implementation'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'recoveryVaultAppId'
  ): TypedContractMethod<[], [string], 'view'>

  getEvent(
    key: 'ProxyDeposit'
  ): TypedContractEvent<
    ProxyDepositEvent.InputTuple,
    ProxyDepositEvent.OutputTuple,
    ProxyDepositEvent.OutputObject
  >
  getEvent(
    key: 'SetApp'
  ): TypedContractEvent<
    SetAppEvent.InputTuple,
    SetAppEvent.OutputTuple,
    SetAppEvent.OutputObject
  >

  filters: {
    'ProxyDeposit(address,uint256)': TypedContractEvent<
      ProxyDepositEvent.InputTuple,
      ProxyDepositEvent.OutputTuple,
      ProxyDepositEvent.OutputObject
    >
    ProxyDeposit: TypedContractEvent<
      ProxyDepositEvent.InputTuple,
      ProxyDepositEvent.OutputTuple,
      ProxyDepositEvent.OutputObject
    >

    'SetApp(bytes32,bytes32,address)': TypedContractEvent<
      SetAppEvent.InputTuple,
      SetAppEvent.OutputTuple,
      SetAppEvent.OutputObject
    >
    SetApp: TypedContractEvent<
      SetAppEvent.InputTuple,
      SetAppEvent.OutputTuple,
      SetAppEvent.OutputObject
    >
  }
}
