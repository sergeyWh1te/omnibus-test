/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common'

export interface MiniMeTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'name'
      | 'approve'
      | 'creationBlock'
      | 'totalSupply'
      | 'transferFrom'
      | 'decimals'
      | 'changeController'
      | 'balanceOfAt'
      | 'version'
      | 'createCloneToken'
      | 'balanceOf'
      | 'parentToken'
      | 'generateTokens'
      | 'symbol'
      | 'totalSupplyAt'
      | 'transfer'
      | 'transfersEnabled'
      | 'parentSnapShotBlock'
      | 'approveAndCall'
      | 'destroyTokens'
      | 'allowance'
      | 'claimTokens'
      | 'tokenFactory'
      | 'enableTransfers'
      | 'controller'
  ): FunctionFragment

  getEvent(
    nameOrSignatureOrTopic:
      | 'ClaimedTokens'
      | 'Transfer'
      | 'NewCloneToken'
      | 'Approval'
  ): EventFragment

  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'creationBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [AddressLike, AddressLike, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'changeController',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'balanceOfAt',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'version', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'createCloneToken',
    values: [string, BigNumberish, string, BigNumberish, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'parentToken',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'generateTokens',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalSupplyAt',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transfersEnabled',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'parentSnapShotBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'approveAndCall',
    values: [AddressLike, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'destroyTokens',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [AddressLike, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'claimTokens',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'tokenFactory',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'enableTransfers',
    values: [boolean]
  ): string
  encodeFunctionData(functionFragment: 'controller', values?: undefined): string

  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'creationBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'changeController',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'balanceOfAt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'createCloneToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'parentToken', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'generateTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'totalSupplyAt',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transfersEnabled',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'parentSnapShotBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'approveAndCall',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'destroyTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimTokens', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'tokenFactory',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'enableTransfers',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'controller', data: BytesLike): Result
}

export namespace ClaimedTokensEvent {
  export type InputTuple = [
    _token: AddressLike,
    _controller: AddressLike,
    _amount: BigNumberish
  ]
  export type OutputTuple = [
    _token: string,
    _controller: string,
    _amount: bigint
  ]
  export interface OutputObject {
    _token: string
    _controller: string
    _amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace TransferEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: AddressLike,
    _amount: BigNumberish
  ]
  export type OutputTuple = [_from: string, _to: string, _amount: bigint]
  export interface OutputObject {
    _from: string
    _to: string
    _amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace NewCloneTokenEvent {
  export type InputTuple = [
    _cloneToken: AddressLike,
    _snapshotBlock: BigNumberish
  ]
  export type OutputTuple = [_cloneToken: string, _snapshotBlock: bigint]
  export interface OutputObject {
    _cloneToken: string
    _snapshotBlock: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ApprovalEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _spender: AddressLike,
    _amount: BigNumberish
  ]
  export type OutputTuple = [_owner: string, _spender: string, _amount: bigint]
  export interface OutputObject {
    _owner: string
    _spender: string
    _amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface MiniMeToken extends BaseContract {
  connect(runner?: ContractRunner | null): MiniMeToken
  waitForDeployment(): Promise<this>

  interface: MiniMeTokenInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>

  name: TypedContractMethod<[], [string], 'view'>

  approve: TypedContractMethod<
    [_spender: AddressLike, _amount: BigNumberish],
    [boolean],
    'nonpayable'
  >

  creationBlock: TypedContractMethod<[], [bigint], 'view'>

  totalSupply: TypedContractMethod<[], [bigint], 'view'>

  transferFrom: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [boolean],
    'nonpayable'
  >

  decimals: TypedContractMethod<[], [bigint], 'view'>

  changeController: TypedContractMethod<
    [_newController: AddressLike],
    [void],
    'nonpayable'
  >

  balanceOfAt: TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    'view'
  >

  version: TypedContractMethod<[], [string], 'view'>

  createCloneToken: TypedContractMethod<
    [
      _cloneTokenName: string,
      _cloneDecimalUnits: BigNumberish,
      _cloneTokenSymbol: string,
      _snapshotBlock: BigNumberish,
      _transfersEnabled: boolean
    ],
    [string],
    'nonpayable'
  >

  balanceOf: TypedContractMethod<[_owner: AddressLike], [bigint], 'view'>

  parentToken: TypedContractMethod<[], [string], 'view'>

  generateTokens: TypedContractMethod<
    [_owner: AddressLike, _amount: BigNumberish],
    [boolean],
    'nonpayable'
  >

  symbol: TypedContractMethod<[], [string], 'view'>

  totalSupplyAt: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [bigint],
    'view'
  >

  transfer: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [boolean],
    'nonpayable'
  >

  transfersEnabled: TypedContractMethod<[], [boolean], 'view'>

  parentSnapShotBlock: TypedContractMethod<[], [bigint], 'view'>

  approveAndCall: TypedContractMethod<
    [_spender: AddressLike, _amount: BigNumberish, _extraData: BytesLike],
    [boolean],
    'nonpayable'
  >

  destroyTokens: TypedContractMethod<
    [_owner: AddressLike, _amount: BigNumberish],
    [boolean],
    'nonpayable'
  >

  allowance: TypedContractMethod<
    [_owner: AddressLike, _spender: AddressLike],
    [bigint],
    'view'
  >

  claimTokens: TypedContractMethod<[_token: AddressLike], [void], 'nonpayable'>

  tokenFactory: TypedContractMethod<[], [string], 'view'>

  enableTransfers: TypedContractMethod<
    [_transfersEnabled: boolean],
    [void],
    'nonpayable'
  >

  controller: TypedContractMethod<[], [string], 'view'>

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T

  getFunction(
    nameOrSignature: 'name'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'approve'
  ): TypedContractMethod<
    [_spender: AddressLike, _amount: BigNumberish],
    [boolean],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'creationBlock'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'totalSupply'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'transferFrom'
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [boolean],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'decimals'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'changeController'
  ): TypedContractMethod<[_newController: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'balanceOfAt'
  ): TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    'view'
  >
  getFunction(
    nameOrSignature: 'version'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'createCloneToken'
  ): TypedContractMethod<
    [
      _cloneTokenName: string,
      _cloneDecimalUnits: BigNumberish,
      _cloneTokenSymbol: string,
      _snapshotBlock: BigNumberish,
      _transfersEnabled: boolean
    ],
    [string],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'balanceOf'
  ): TypedContractMethod<[_owner: AddressLike], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'parentToken'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'generateTokens'
  ): TypedContractMethod<
    [_owner: AddressLike, _amount: BigNumberish],
    [boolean],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'symbol'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'totalSupplyAt'
  ): TypedContractMethod<[_blockNumber: BigNumberish], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'transfer'
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [boolean],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'transfersEnabled'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'parentSnapShotBlock'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'approveAndCall'
  ): TypedContractMethod<
    [_spender: AddressLike, _amount: BigNumberish, _extraData: BytesLike],
    [boolean],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'destroyTokens'
  ): TypedContractMethod<
    [_owner: AddressLike, _amount: BigNumberish],
    [boolean],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'allowance'
  ): TypedContractMethod<
    [_owner: AddressLike, _spender: AddressLike],
    [bigint],
    'view'
  >
  getFunction(
    nameOrSignature: 'claimTokens'
  ): TypedContractMethod<[_token: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'tokenFactory'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'enableTransfers'
  ): TypedContractMethod<[_transfersEnabled: boolean], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'controller'
  ): TypedContractMethod<[], [string], 'view'>

  getEvent(
    key: 'ClaimedTokens'
  ): TypedContractEvent<
    ClaimedTokensEvent.InputTuple,
    ClaimedTokensEvent.OutputTuple,
    ClaimedTokensEvent.OutputObject
  >
  getEvent(
    key: 'Transfer'
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >
  getEvent(
    key: 'NewCloneToken'
  ): TypedContractEvent<
    NewCloneTokenEvent.InputTuple,
    NewCloneTokenEvent.OutputTuple,
    NewCloneTokenEvent.OutputObject
  >
  getEvent(
    key: 'Approval'
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >

  filters: {
    'ClaimedTokens(address,address,uint256)': TypedContractEvent<
      ClaimedTokensEvent.InputTuple,
      ClaimedTokensEvent.OutputTuple,
      ClaimedTokensEvent.OutputObject
    >
    ClaimedTokens: TypedContractEvent<
      ClaimedTokensEvent.InputTuple,
      ClaimedTokensEvent.OutputTuple,
      ClaimedTokensEvent.OutputObject
    >

    'Transfer(address,address,uint256)': TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >

    'NewCloneToken(address,uint256)': TypedContractEvent<
      NewCloneTokenEvent.InputTuple,
      NewCloneTokenEvent.OutputTuple,
      NewCloneTokenEvent.OutputObject
    >
    NewCloneToken: TypedContractEvent<
      NewCloneTokenEvent.InputTuple,
      NewCloneTokenEvent.OutputTuple,
      NewCloneTokenEvent.OutputObject
    >

    'Approval(address,address,uint256)': TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >
  }
}
