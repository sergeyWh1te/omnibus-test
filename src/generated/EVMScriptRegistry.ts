/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common'

export interface EVMScriptRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'getScriptExecutor'
      | 'hasInitialized'
      | 'REGISTRY_ADD_EXECUTOR_ROLE'
      | 'getEVMScriptExecutor'
      | 'getRecoveryVault'
      | 'disableScriptExecutor'
      | 'allowRecoverability'
      | 'appId'
      | 'initialize'
      | 'addScriptExecutor'
      | 'getInitializationBlock'
      | 'transferToVault'
      | 'canPerform'
      | 'getEVMScriptRegistry'
      | 'REGISTRY_MANAGER_ROLE'
      | 'enableScriptExecutor'
      | 'kernel'
      | 'isPetrified'
      | 'executors'
  ): FunctionFragment

  getEvent(
    nameOrSignatureOrTopic:
      | 'EnableExecutor'
      | 'DisableExecutor'
      | 'ScriptResult'
      | 'RecoverToVault'
  ): EventFragment

  encodeFunctionData(
    functionFragment: 'getScriptExecutor',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'hasInitialized',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'REGISTRY_ADD_EXECUTOR_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getEVMScriptExecutor',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getRecoveryVault',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'disableScriptExecutor',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'allowRecoverability',
    values: [AddressLike]
  ): string
  encodeFunctionData(functionFragment: 'appId', values?: undefined): string
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'addScriptExecutor',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getInitializationBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transferToVault',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'canPerform',
    values: [AddressLike, BytesLike, BigNumberish[]]
  ): string
  encodeFunctionData(
    functionFragment: 'getEVMScriptRegistry',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'REGISTRY_MANAGER_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'enableScriptExecutor',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'kernel', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'isPetrified',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'executors',
    values: [BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'getScriptExecutor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'hasInitialized',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'REGISTRY_ADD_EXECUTOR_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getEVMScriptExecutor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRecoveryVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'disableScriptExecutor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'allowRecoverability',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'appId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'addScriptExecutor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getInitializationBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferToVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'canPerform', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getEVMScriptRegistry',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'REGISTRY_MANAGER_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'enableScriptExecutor',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'kernel', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isPetrified', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'executors', data: BytesLike): Result
}

export namespace EnableExecutorEvent {
  export type InputTuple = [
    executorId: BigNumberish,
    executorAddress: AddressLike
  ]
  export type OutputTuple = [executorId: bigint, executorAddress: string]
  export interface OutputObject {
    executorId: bigint
    executorAddress: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace DisableExecutorEvent {
  export type InputTuple = [
    executorId: BigNumberish,
    executorAddress: AddressLike
  ]
  export type OutputTuple = [executorId: bigint, executorAddress: string]
  export interface OutputObject {
    executorId: bigint
    executorAddress: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ScriptResultEvent {
  export type InputTuple = [
    executor: AddressLike,
    script: BytesLike,
    input: BytesLike,
    returnData: BytesLike
  ]
  export type OutputTuple = [
    executor: string,
    script: string,
    input: string,
    returnData: string
  ]
  export interface OutputObject {
    executor: string
    script: string
    input: string
    returnData: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RecoverToVaultEvent {
  export type InputTuple = [
    vault: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ]
  export type OutputTuple = [vault: string, token: string, amount: bigint]
  export interface OutputObject {
    vault: string
    token: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface EVMScriptRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): EVMScriptRegistry
  waitForDeployment(): Promise<this>

  interface: EVMScriptRegistryInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>

  getScriptExecutor: TypedContractMethod<[_script: BytesLike], [string], 'view'>

  hasInitialized: TypedContractMethod<[], [boolean], 'view'>

  REGISTRY_ADD_EXECUTOR_ROLE: TypedContractMethod<[], [string], 'view'>

  getEVMScriptExecutor: TypedContractMethod<
    [_script: BytesLike],
    [string],
    'view'
  >

  getRecoveryVault: TypedContractMethod<[], [string], 'view'>

  disableScriptExecutor: TypedContractMethod<
    [_executorId: BigNumberish],
    [void],
    'nonpayable'
  >

  allowRecoverability: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    'view'
  >

  appId: TypedContractMethod<[], [string], 'view'>

  initialize: TypedContractMethod<[], [void], 'nonpayable'>

  addScriptExecutor: TypedContractMethod<
    [_executor: AddressLike],
    [bigint],
    'nonpayable'
  >

  getInitializationBlock: TypedContractMethod<[], [bigint], 'view'>

  transferToVault: TypedContractMethod<
    [_token: AddressLike],
    [void],
    'nonpayable'
  >

  canPerform: TypedContractMethod<
    [_sender: AddressLike, _role: BytesLike, _params: BigNumberish[]],
    [boolean],
    'view'
  >

  getEVMScriptRegistry: TypedContractMethod<[], [string], 'view'>

  REGISTRY_MANAGER_ROLE: TypedContractMethod<[], [string], 'view'>

  enableScriptExecutor: TypedContractMethod<
    [_executorId: BigNumberish],
    [void],
    'nonpayable'
  >

  kernel: TypedContractMethod<[], [string], 'view'>

  isPetrified: TypedContractMethod<[], [boolean], 'view'>

  executors: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, boolean] & { executor: string; enabled: boolean }],
    'view'
  >

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T

  getFunction(
    nameOrSignature: 'getScriptExecutor'
  ): TypedContractMethod<[_script: BytesLike], [string], 'view'>
  getFunction(
    nameOrSignature: 'hasInitialized'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'REGISTRY_ADD_EXECUTOR_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'getEVMScriptExecutor'
  ): TypedContractMethod<[_script: BytesLike], [string], 'view'>
  getFunction(
    nameOrSignature: 'getRecoveryVault'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'disableScriptExecutor'
  ): TypedContractMethod<[_executorId: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'allowRecoverability'
  ): TypedContractMethod<[token: AddressLike], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'appId'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'addScriptExecutor'
  ): TypedContractMethod<[_executor: AddressLike], [bigint], 'nonpayable'>
  getFunction(
    nameOrSignature: 'getInitializationBlock'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'transferToVault'
  ): TypedContractMethod<[_token: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'canPerform'
  ): TypedContractMethod<
    [_sender: AddressLike, _role: BytesLike, _params: BigNumberish[]],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'getEVMScriptRegistry'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'REGISTRY_MANAGER_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'enableScriptExecutor'
  ): TypedContractMethod<[_executorId: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'kernel'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'isPetrified'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'executors'
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, boolean] & { executor: string; enabled: boolean }],
    'view'
  >

  getEvent(
    key: 'EnableExecutor'
  ): TypedContractEvent<
    EnableExecutorEvent.InputTuple,
    EnableExecutorEvent.OutputTuple,
    EnableExecutorEvent.OutputObject
  >
  getEvent(
    key: 'DisableExecutor'
  ): TypedContractEvent<
    DisableExecutorEvent.InputTuple,
    DisableExecutorEvent.OutputTuple,
    DisableExecutorEvent.OutputObject
  >
  getEvent(
    key: 'ScriptResult'
  ): TypedContractEvent<
    ScriptResultEvent.InputTuple,
    ScriptResultEvent.OutputTuple,
    ScriptResultEvent.OutputObject
  >
  getEvent(
    key: 'RecoverToVault'
  ): TypedContractEvent<
    RecoverToVaultEvent.InputTuple,
    RecoverToVaultEvent.OutputTuple,
    RecoverToVaultEvent.OutputObject
  >

  filters: {
    'EnableExecutor(uint256,address)': TypedContractEvent<
      EnableExecutorEvent.InputTuple,
      EnableExecutorEvent.OutputTuple,
      EnableExecutorEvent.OutputObject
    >
    EnableExecutor: TypedContractEvent<
      EnableExecutorEvent.InputTuple,
      EnableExecutorEvent.OutputTuple,
      EnableExecutorEvent.OutputObject
    >

    'DisableExecutor(uint256,address)': TypedContractEvent<
      DisableExecutorEvent.InputTuple,
      DisableExecutorEvent.OutputTuple,
      DisableExecutorEvent.OutputObject
    >
    DisableExecutor: TypedContractEvent<
      DisableExecutorEvent.InputTuple,
      DisableExecutorEvent.OutputTuple,
      DisableExecutorEvent.OutputObject
    >

    'ScriptResult(address,bytes,bytes,bytes)': TypedContractEvent<
      ScriptResultEvent.InputTuple,
      ScriptResultEvent.OutputTuple,
      ScriptResultEvent.OutputObject
    >
    ScriptResult: TypedContractEvent<
      ScriptResultEvent.InputTuple,
      ScriptResultEvent.OutputTuple,
      ScriptResultEvent.OutputObject
    >

    'RecoverToVault(address,address,uint256)': TypedContractEvent<
      RecoverToVaultEvent.InputTuple,
      RecoverToVaultEvent.OutputTuple,
      RecoverToVaultEvent.OutputObject
    >
    RecoverToVault: TypedContractEvent<
      RecoverToVaultEvent.InputTuple,
      RecoverToVaultEvent.OutputTuple,
      RecoverToVaultEvent.OutputObject
    >
  }
}
