/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common'

export interface FinanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'hasInitialized'
      | 'CREATE_PAYMENTS_ROLE'
      | 'newScheduledPayment'
      | 'executePayment'
      | 'initialize'
      | 'removeBudget'
      | 'getBudget'
      | 'getEVMScriptExecutor'
      | 'setPaymentStatus'
      | 'getPayment'
      | 'getRecoveryVault'
      | 'getTransaction'
      | 'CHANGE_PERIOD_ROLE'
      | 'CHANGE_BUDGETS_ROLE'
      | 'receiverExecutePayment'
      | 'getPeriod'
      | 'setPeriodDuration'
      | 'periodsLength'
      | 'setBudget'
      | 'allowRecoverability'
      | 'appId'
      | 'getInitializationBlock'
      | 'recoverToVault'
      | 'EXECUTE_PAYMENTS_ROLE'
      | 'currentPeriodId'
      | 'transferToVault'
      | 'canPerform'
      | 'getEVMScriptRegistry'
      | 'tryTransitionAccountingPeriod'
      | 'getPeriodDuration'
      | 'deposit'
      | 'nextPaymentTime'
      | 'getPeriodTokenStatement'
      | 'kernel'
      | 'paymentsNextIndex'
      | 'isPetrified'
      | 'canMakePayment'
      | 'MANAGE_PAYMENTS_ROLE'
      | 'transactionsNextIndex'
      | 'getRemainingBudget'
      | 'newImmediatePayment'
      | 'vault'
  ): FunctionFragment

  getEvent(
    nameOrSignatureOrTopic:
      | 'NewPeriod'
      | 'SetBudget'
      | 'NewPayment'
      | 'NewTransaction'
      | 'ChangePaymentState'
      | 'ChangePeriodDuration'
      | 'PaymentFailure'
      | 'ScriptResult'
      | 'RecoverToVault'
  ): EventFragment

  encodeFunctionData(
    functionFragment: 'hasInitialized',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'CREATE_PAYMENTS_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'newScheduledPayment',
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'executePayment',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'removeBudget',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getBudget',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getEVMScriptExecutor',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'setPaymentStatus',
    values: [BigNumberish, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'getPayment',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getRecoveryVault',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getTransaction',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'CHANGE_PERIOD_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'CHANGE_BUDGETS_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'receiverExecutePayment',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getPeriod',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setPeriodDuration',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'periodsLength',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setBudget',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'allowRecoverability',
    values: [AddressLike]
  ): string
  encodeFunctionData(functionFragment: 'appId', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getInitializationBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'recoverToVault',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'EXECUTE_PAYMENTS_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'currentPeriodId',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transferToVault',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'canPerform',
    values: [AddressLike, BytesLike, BigNumberish[]]
  ): string
  encodeFunctionData(
    functionFragment: 'getEVMScriptRegistry',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'tryTransitionAccountingPeriod',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getPeriodDuration',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [AddressLike, BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'nextPaymentTime',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getPeriodTokenStatement',
    values: [BigNumberish, AddressLike]
  ): string
  encodeFunctionData(functionFragment: 'kernel', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'paymentsNextIndex',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'isPetrified',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'canMakePayment',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'MANAGE_PAYMENTS_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transactionsNextIndex',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getRemainingBudget',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'newImmediatePayment',
    values: [AddressLike, AddressLike, BigNumberish, string]
  ): string
  encodeFunctionData(functionFragment: 'vault', values?: undefined): string

  decodeFunctionResult(
    functionFragment: 'hasInitialized',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'CREATE_PAYMENTS_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'newScheduledPayment',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'executePayment',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removeBudget',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getBudget', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getEVMScriptExecutor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setPaymentStatus',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getPayment', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getRecoveryVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTransaction',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'CHANGE_PERIOD_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'CHANGE_BUDGETS_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'receiverExecutePayment',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getPeriod', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setPeriodDuration',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'periodsLength',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setBudget', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'allowRecoverability',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'appId', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getInitializationBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'recoverToVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'EXECUTE_PAYMENTS_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'currentPeriodId',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferToVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'canPerform', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getEVMScriptRegistry',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'tryTransitionAccountingPeriod',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getPeriodDuration',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'nextPaymentTime',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getPeriodTokenStatement',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'kernel', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'paymentsNextIndex',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'isPetrified', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'canMakePayment',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'MANAGE_PAYMENTS_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transactionsNextIndex',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRemainingBudget',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'newImmediatePayment',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'vault', data: BytesLike): Result
}

export namespace NewPeriodEvent {
  export type InputTuple = [
    periodId: BigNumberish,
    periodStarts: BigNumberish,
    periodEnds: BigNumberish
  ]
  export type OutputTuple = [
    periodId: bigint,
    periodStarts: bigint,
    periodEnds: bigint
  ]
  export interface OutputObject {
    periodId: bigint
    periodStarts: bigint
    periodEnds: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SetBudgetEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    hasBudget: boolean
  ]
  export type OutputTuple = [token: string, amount: bigint, hasBudget: boolean]
  export interface OutputObject {
    token: string
    amount: bigint
    hasBudget: boolean
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace NewPaymentEvent {
  export type InputTuple = [
    paymentId: BigNumberish,
    recipient: AddressLike,
    maxExecutions: BigNumberish,
    reference: string
  ]
  export type OutputTuple = [
    paymentId: bigint,
    recipient: string,
    maxExecutions: bigint,
    reference: string
  ]
  export interface OutputObject {
    paymentId: bigint
    recipient: string
    maxExecutions: bigint
    reference: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace NewTransactionEvent {
  export type InputTuple = [
    transactionId: BigNumberish,
    incoming: boolean,
    entity: AddressLike,
    amount: BigNumberish,
    reference: string
  ]
  export type OutputTuple = [
    transactionId: bigint,
    incoming: boolean,
    entity: string,
    amount: bigint,
    reference: string
  ]
  export interface OutputObject {
    transactionId: bigint
    incoming: boolean
    entity: string
    amount: bigint
    reference: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ChangePaymentStateEvent {
  export type InputTuple = [paymentId: BigNumberish, active: boolean]
  export type OutputTuple = [paymentId: bigint, active: boolean]
  export interface OutputObject {
    paymentId: bigint
    active: boolean
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ChangePeriodDurationEvent {
  export type InputTuple = [newDuration: BigNumberish]
  export type OutputTuple = [newDuration: bigint]
  export interface OutputObject {
    newDuration: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace PaymentFailureEvent {
  export type InputTuple = [paymentId: BigNumberish]
  export type OutputTuple = [paymentId: bigint]
  export interface OutputObject {
    paymentId: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ScriptResultEvent {
  export type InputTuple = [
    executor: AddressLike,
    script: BytesLike,
    input: BytesLike,
    returnData: BytesLike
  ]
  export type OutputTuple = [
    executor: string,
    script: string,
    input: string,
    returnData: string
  ]
  export interface OutputObject {
    executor: string
    script: string
    input: string
    returnData: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RecoverToVaultEvent {
  export type InputTuple = [
    vault: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ]
  export type OutputTuple = [vault: string, token: string, amount: bigint]
  export interface OutputObject {
    vault: string
    token: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface Finance extends BaseContract {
  connect(runner?: ContractRunner | null): Finance
  waitForDeployment(): Promise<this>

  interface: FinanceInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>

  hasInitialized: TypedContractMethod<[], [boolean], 'view'>

  CREATE_PAYMENTS_ROLE: TypedContractMethod<[], [string], 'view'>

  newScheduledPayment: TypedContractMethod<
    [
      _token: AddressLike,
      _receiver: AddressLike,
      _amount: BigNumberish,
      _initialPaymentTime: BigNumberish,
      _interval: BigNumberish,
      _maxExecutions: BigNumberish,
      _reference: string
    ],
    [bigint],
    'nonpayable'
  >

  executePayment: TypedContractMethod<
    [_paymentId: BigNumberish],
    [void],
    'nonpayable'
  >

  initialize: TypedContractMethod<
    [_vault: AddressLike, _periodDuration: BigNumberish],
    [void],
    'nonpayable'
  >

  removeBudget: TypedContractMethod<[_token: AddressLike], [void], 'nonpayable'>

  getBudget: TypedContractMethod<
    [_token: AddressLike],
    [[bigint, boolean] & { budget: bigint; hasBudget: boolean }],
    'view'
  >

  getEVMScriptExecutor: TypedContractMethod<
    [_script: BytesLike],
    [string],
    'view'
  >

  setPaymentStatus: TypedContractMethod<
    [_paymentId: BigNumberish, _active: boolean],
    [void],
    'nonpayable'
  >

  getPayment: TypedContractMethod<
    [_paymentId: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        string
      ] & {
        token: string
        receiver: string
        amount: bigint
        initialPaymentTime: bigint
        interval: bigint
        maxExecutions: bigint
        inactive: boolean
        executions: bigint
        createdBy: string
      }
    ],
    'view'
  >

  getRecoveryVault: TypedContractMethod<[], [string], 'view'>

  getTransaction: TypedContractMethod<
    [_transactionId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, string, string, boolean, bigint] & {
        periodId: bigint
        amount: bigint
        paymentId: bigint
        paymentExecutionNumber: bigint
        token: string
        entity: string
        isIncoming: boolean
        date: bigint
      }
    ],
    'view'
  >

  CHANGE_PERIOD_ROLE: TypedContractMethod<[], [string], 'view'>

  CHANGE_BUDGETS_ROLE: TypedContractMethod<[], [string], 'view'>

  receiverExecutePayment: TypedContractMethod<
    [_paymentId: BigNumberish],
    [void],
    'nonpayable'
  >

  getPeriod: TypedContractMethod<
    [_periodId: BigNumberish],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        isCurrent: boolean
        startTime: bigint
        endTime: bigint
        firstTransactionId: bigint
        lastTransactionId: bigint
      }
    ],
    'view'
  >

  setPeriodDuration: TypedContractMethod<
    [_periodDuration: BigNumberish],
    [void],
    'nonpayable'
  >

  periodsLength: TypedContractMethod<[], [bigint], 'view'>

  setBudget: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    'nonpayable'
  >

  allowRecoverability: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    'view'
  >

  appId: TypedContractMethod<[], [string], 'view'>

  getInitializationBlock: TypedContractMethod<[], [bigint], 'view'>

  recoverToVault: TypedContractMethod<
    [_token: AddressLike],
    [void],
    'nonpayable'
  >

  EXECUTE_PAYMENTS_ROLE: TypedContractMethod<[], [string], 'view'>

  currentPeriodId: TypedContractMethod<[], [bigint], 'view'>

  transferToVault: TypedContractMethod<
    [_token: AddressLike],
    [void],
    'nonpayable'
  >

  canPerform: TypedContractMethod<
    [_sender: AddressLike, _role: BytesLike, _params: BigNumberish[]],
    [boolean],
    'view'
  >

  getEVMScriptRegistry: TypedContractMethod<[], [string], 'view'>

  tryTransitionAccountingPeriod: TypedContractMethod<
    [_maxTransitions: BigNumberish],
    [boolean],
    'nonpayable'
  >

  getPeriodDuration: TypedContractMethod<[], [bigint], 'view'>

  deposit: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish, _reference: string],
    [void],
    'payable'
  >

  nextPaymentTime: TypedContractMethod<
    [_paymentId: BigNumberish],
    [bigint],
    'view'
  >

  getPeriodTokenStatement: TypedContractMethod<
    [_periodId: BigNumberish, _token: AddressLike],
    [[bigint, bigint] & { expenses: bigint; income: bigint }],
    'view'
  >

  kernel: TypedContractMethod<[], [string], 'view'>

  paymentsNextIndex: TypedContractMethod<[], [bigint], 'view'>

  isPetrified: TypedContractMethod<[], [boolean], 'view'>

  canMakePayment: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [boolean],
    'view'
  >

  MANAGE_PAYMENTS_ROLE: TypedContractMethod<[], [string], 'view'>

  transactionsNextIndex: TypedContractMethod<[], [bigint], 'view'>

  getRemainingBudget: TypedContractMethod<
    [_token: AddressLike],
    [bigint],
    'view'
  >

  newImmediatePayment: TypedContractMethod<
    [
      _token: AddressLike,
      _receiver: AddressLike,
      _amount: BigNumberish,
      _reference: string
    ],
    [void],
    'nonpayable'
  >

  vault: TypedContractMethod<[], [string], 'view'>

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T

  getFunction(
    nameOrSignature: 'hasInitialized'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'CREATE_PAYMENTS_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'newScheduledPayment'
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _receiver: AddressLike,
      _amount: BigNumberish,
      _initialPaymentTime: BigNumberish,
      _interval: BigNumberish,
      _maxExecutions: BigNumberish,
      _reference: string
    ],
    [bigint],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'executePayment'
  ): TypedContractMethod<[_paymentId: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<
    [_vault: AddressLike, _periodDuration: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'removeBudget'
  ): TypedContractMethod<[_token: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'getBudget'
  ): TypedContractMethod<
    [_token: AddressLike],
    [[bigint, boolean] & { budget: bigint; hasBudget: boolean }],
    'view'
  >
  getFunction(
    nameOrSignature: 'getEVMScriptExecutor'
  ): TypedContractMethod<[_script: BytesLike], [string], 'view'>
  getFunction(
    nameOrSignature: 'setPaymentStatus'
  ): TypedContractMethod<
    [_paymentId: BigNumberish, _active: boolean],
    [void],
    'nonpayable'
  >
  getFunction(nameOrSignature: 'getPayment'): TypedContractMethod<
    [_paymentId: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        string
      ] & {
        token: string
        receiver: string
        amount: bigint
        initialPaymentTime: bigint
        interval: bigint
        maxExecutions: bigint
        inactive: boolean
        executions: bigint
        createdBy: string
      }
    ],
    'view'
  >
  getFunction(
    nameOrSignature: 'getRecoveryVault'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(nameOrSignature: 'getTransaction'): TypedContractMethod<
    [_transactionId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, string, string, boolean, bigint] & {
        periodId: bigint
        amount: bigint
        paymentId: bigint
        paymentExecutionNumber: bigint
        token: string
        entity: string
        isIncoming: boolean
        date: bigint
      }
    ],
    'view'
  >
  getFunction(
    nameOrSignature: 'CHANGE_PERIOD_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'CHANGE_BUDGETS_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'receiverExecutePayment'
  ): TypedContractMethod<[_paymentId: BigNumberish], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'getPeriod'): TypedContractMethod<
    [_periodId: BigNumberish],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        isCurrent: boolean
        startTime: bigint
        endTime: bigint
        firstTransactionId: bigint
        lastTransactionId: bigint
      }
    ],
    'view'
  >
  getFunction(
    nameOrSignature: 'setPeriodDuration'
  ): TypedContractMethod<[_periodDuration: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'periodsLength'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'setBudget'
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'allowRecoverability'
  ): TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'appId'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'getInitializationBlock'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'recoverToVault'
  ): TypedContractMethod<[_token: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'EXECUTE_PAYMENTS_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'currentPeriodId'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'transferToVault'
  ): TypedContractMethod<[_token: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'canPerform'
  ): TypedContractMethod<
    [_sender: AddressLike, _role: BytesLike, _params: BigNumberish[]],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'getEVMScriptRegistry'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'tryTransitionAccountingPeriod'
  ): TypedContractMethod<
    [_maxTransitions: BigNumberish],
    [boolean],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'getPeriodDuration'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'deposit'
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish, _reference: string],
    [void],
    'payable'
  >
  getFunction(
    nameOrSignature: 'nextPaymentTime'
  ): TypedContractMethod<[_paymentId: BigNumberish], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'getPeriodTokenStatement'
  ): TypedContractMethod<
    [_periodId: BigNumberish, _token: AddressLike],
    [[bigint, bigint] & { expenses: bigint; income: bigint }],
    'view'
  >
  getFunction(
    nameOrSignature: 'kernel'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'paymentsNextIndex'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'isPetrified'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'canMakePayment'
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'MANAGE_PAYMENTS_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'transactionsNextIndex'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'getRemainingBudget'
  ): TypedContractMethod<[_token: AddressLike], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'newImmediatePayment'
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _receiver: AddressLike,
      _amount: BigNumberish,
      _reference: string
    ],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'vault'
  ): TypedContractMethod<[], [string], 'view'>

  getEvent(
    key: 'NewPeriod'
  ): TypedContractEvent<
    NewPeriodEvent.InputTuple,
    NewPeriodEvent.OutputTuple,
    NewPeriodEvent.OutputObject
  >
  getEvent(
    key: 'SetBudget'
  ): TypedContractEvent<
    SetBudgetEvent.InputTuple,
    SetBudgetEvent.OutputTuple,
    SetBudgetEvent.OutputObject
  >
  getEvent(
    key: 'NewPayment'
  ): TypedContractEvent<
    NewPaymentEvent.InputTuple,
    NewPaymentEvent.OutputTuple,
    NewPaymentEvent.OutputObject
  >
  getEvent(
    key: 'NewTransaction'
  ): TypedContractEvent<
    NewTransactionEvent.InputTuple,
    NewTransactionEvent.OutputTuple,
    NewTransactionEvent.OutputObject
  >
  getEvent(
    key: 'ChangePaymentState'
  ): TypedContractEvent<
    ChangePaymentStateEvent.InputTuple,
    ChangePaymentStateEvent.OutputTuple,
    ChangePaymentStateEvent.OutputObject
  >
  getEvent(
    key: 'ChangePeriodDuration'
  ): TypedContractEvent<
    ChangePeriodDurationEvent.InputTuple,
    ChangePeriodDurationEvent.OutputTuple,
    ChangePeriodDurationEvent.OutputObject
  >
  getEvent(
    key: 'PaymentFailure'
  ): TypedContractEvent<
    PaymentFailureEvent.InputTuple,
    PaymentFailureEvent.OutputTuple,
    PaymentFailureEvent.OutputObject
  >
  getEvent(
    key: 'ScriptResult'
  ): TypedContractEvent<
    ScriptResultEvent.InputTuple,
    ScriptResultEvent.OutputTuple,
    ScriptResultEvent.OutputObject
  >
  getEvent(
    key: 'RecoverToVault'
  ): TypedContractEvent<
    RecoverToVaultEvent.InputTuple,
    RecoverToVaultEvent.OutputTuple,
    RecoverToVaultEvent.OutputObject
  >

  filters: {
    'NewPeriod(uint64,uint64,uint64)': TypedContractEvent<
      NewPeriodEvent.InputTuple,
      NewPeriodEvent.OutputTuple,
      NewPeriodEvent.OutputObject
    >
    NewPeriod: TypedContractEvent<
      NewPeriodEvent.InputTuple,
      NewPeriodEvent.OutputTuple,
      NewPeriodEvent.OutputObject
    >

    'SetBudget(address,uint256,bool)': TypedContractEvent<
      SetBudgetEvent.InputTuple,
      SetBudgetEvent.OutputTuple,
      SetBudgetEvent.OutputObject
    >
    SetBudget: TypedContractEvent<
      SetBudgetEvent.InputTuple,
      SetBudgetEvent.OutputTuple,
      SetBudgetEvent.OutputObject
    >

    'NewPayment(uint256,address,uint64,string)': TypedContractEvent<
      NewPaymentEvent.InputTuple,
      NewPaymentEvent.OutputTuple,
      NewPaymentEvent.OutputObject
    >
    NewPayment: TypedContractEvent<
      NewPaymentEvent.InputTuple,
      NewPaymentEvent.OutputTuple,
      NewPaymentEvent.OutputObject
    >

    'NewTransaction(uint256,bool,address,uint256,string)': TypedContractEvent<
      NewTransactionEvent.InputTuple,
      NewTransactionEvent.OutputTuple,
      NewTransactionEvent.OutputObject
    >
    NewTransaction: TypedContractEvent<
      NewTransactionEvent.InputTuple,
      NewTransactionEvent.OutputTuple,
      NewTransactionEvent.OutputObject
    >

    'ChangePaymentState(uint256,bool)': TypedContractEvent<
      ChangePaymentStateEvent.InputTuple,
      ChangePaymentStateEvent.OutputTuple,
      ChangePaymentStateEvent.OutputObject
    >
    ChangePaymentState: TypedContractEvent<
      ChangePaymentStateEvent.InputTuple,
      ChangePaymentStateEvent.OutputTuple,
      ChangePaymentStateEvent.OutputObject
    >

    'ChangePeriodDuration(uint64)': TypedContractEvent<
      ChangePeriodDurationEvent.InputTuple,
      ChangePeriodDurationEvent.OutputTuple,
      ChangePeriodDurationEvent.OutputObject
    >
    ChangePeriodDuration: TypedContractEvent<
      ChangePeriodDurationEvent.InputTuple,
      ChangePeriodDurationEvent.OutputTuple,
      ChangePeriodDurationEvent.OutputObject
    >

    'PaymentFailure(uint256)': TypedContractEvent<
      PaymentFailureEvent.InputTuple,
      PaymentFailureEvent.OutputTuple,
      PaymentFailureEvent.OutputObject
    >
    PaymentFailure: TypedContractEvent<
      PaymentFailureEvent.InputTuple,
      PaymentFailureEvent.OutputTuple,
      PaymentFailureEvent.OutputObject
    >

    'ScriptResult(address,bytes,bytes,bytes)': TypedContractEvent<
      ScriptResultEvent.InputTuple,
      ScriptResultEvent.OutputTuple,
      ScriptResultEvent.OutputObject
    >
    ScriptResult: TypedContractEvent<
      ScriptResultEvent.InputTuple,
      ScriptResultEvent.OutputTuple,
      ScriptResultEvent.OutputObject
    >

    'RecoverToVault(address,address,uint256)': TypedContractEvent<
      RecoverToVaultEvent.InputTuple,
      RecoverToVaultEvent.OutputTuple,
      RecoverToVaultEvent.OutputObject
    >
    RecoverToVault: TypedContractEvent<
      RecoverToVaultEvent.InputTuple,
      RecoverToVaultEvent.OutputTuple,
      RecoverToVaultEvent.OutputObject
    >
  }
}
