/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common'

export interface TokenManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'hasInitialized'
      | 'MAX_VESTINGS_PER_ADDRESS'
      | 'spendableBalanceOf'
      | 'assignVested'
      | 'getEVMScriptExecutor'
      | 'getRecoveryVault'
      | 'getVesting'
      | 'mint'
      | 'onTransfer'
      | 'transferableBalance'
      | 'allowRecoverability'
      | 'appId'
      | 'ISSUE_ROLE'
      | 'getInitializationBlock'
      | 'vestingsLengths'
      | 'transferToVault'
      | 'burn'
      | 'canPerform'
      | 'getEVMScriptRegistry'
      | 'ASSIGN_ROLE'
      | 'BURN_ROLE'
      | 'assign'
      | 'canForward'
      | 'issue'
      | 'kernel'
      | 'forward'
      | 'onApprove'
      | 'isPetrified'
      | 'initialize'
      | 'MINT_ROLE'
      | 'maxAccountTokens'
      | 'REVOKE_VESTINGS_ROLE'
      | 'proxyPayment'
      | 'revokeVesting'
      | 'token'
      | 'isForwarder'
  ): FunctionFragment

  getEvent(
    nameOrSignatureOrTopic:
      | 'NewVesting'
      | 'RevokeVesting'
      | 'ScriptResult'
      | 'RecoverToVault'
  ): EventFragment

  encodeFunctionData(
    functionFragment: 'hasInitialized',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'MAX_VESTINGS_PER_ADDRESS',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'spendableBalanceOf',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'assignVested',
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'getEVMScriptExecutor',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getRecoveryVault',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getVesting',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'mint',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'onTransfer',
    values: [AddressLike, AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferableBalance',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'allowRecoverability',
    values: [AddressLike]
  ): string
  encodeFunctionData(functionFragment: 'appId', values?: undefined): string
  encodeFunctionData(functionFragment: 'ISSUE_ROLE', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getInitializationBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'vestingsLengths',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'transferToVault',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'burn',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'canPerform',
    values: [AddressLike, BytesLike, BigNumberish[]]
  ): string
  encodeFunctionData(
    functionFragment: 'getEVMScriptRegistry',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'ASSIGN_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'BURN_ROLE', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'assign',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'canForward',
    values: [AddressLike, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'issue', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'kernel', values?: undefined): string
  encodeFunctionData(functionFragment: 'forward', values: [BytesLike]): string
  encodeFunctionData(
    functionFragment: 'onApprove',
    values: [AddressLike, AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'isPetrified',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [AddressLike, boolean, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'MINT_ROLE', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'maxAccountTokens',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'REVOKE_VESTINGS_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'proxyPayment',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'revokeVesting',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'token', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'isForwarder',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'hasInitialized',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'MAX_VESTINGS_PER_ADDRESS',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'spendableBalanceOf',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'assignVested',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getEVMScriptExecutor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRecoveryVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getVesting', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'onTransfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferableBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'allowRecoverability',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'appId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ISSUE_ROLE', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getInitializationBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'vestingsLengths',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferToVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'canPerform', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getEVMScriptRegistry',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'ASSIGN_ROLE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'BURN_ROLE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'assign', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'canForward', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'issue', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'kernel', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'forward', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'onApprove', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isPetrified', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MINT_ROLE', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'maxAccountTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'REVOKE_VESTINGS_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'proxyPayment',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'revokeVesting',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isForwarder', data: BytesLike): Result
}

export namespace NewVestingEvent {
  export type InputTuple = [
    receiver: AddressLike,
    vestingId: BigNumberish,
    amount: BigNumberish
  ]
  export type OutputTuple = [
    receiver: string,
    vestingId: bigint,
    amount: bigint
  ]
  export interface OutputObject {
    receiver: string
    vestingId: bigint
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RevokeVestingEvent {
  export type InputTuple = [
    receiver: AddressLike,
    vestingId: BigNumberish,
    nonVestedAmount: BigNumberish
  ]
  export type OutputTuple = [
    receiver: string,
    vestingId: bigint,
    nonVestedAmount: bigint
  ]
  export interface OutputObject {
    receiver: string
    vestingId: bigint
    nonVestedAmount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ScriptResultEvent {
  export type InputTuple = [
    executor: AddressLike,
    script: BytesLike,
    input: BytesLike,
    returnData: BytesLike
  ]
  export type OutputTuple = [
    executor: string,
    script: string,
    input: string,
    returnData: string
  ]
  export interface OutputObject {
    executor: string
    script: string
    input: string
    returnData: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RecoverToVaultEvent {
  export type InputTuple = [
    vault: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ]
  export type OutputTuple = [vault: string, token: string, amount: bigint]
  export interface OutputObject {
    vault: string
    token: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface TokenManager extends BaseContract {
  connect(runner?: ContractRunner | null): TokenManager
  waitForDeployment(): Promise<this>

  interface: TokenManagerInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>

  hasInitialized: TypedContractMethod<[], [boolean], 'view'>

  MAX_VESTINGS_PER_ADDRESS: TypedContractMethod<[], [bigint], 'view'>

  spendableBalanceOf: TypedContractMethod<
    [_holder: AddressLike],
    [bigint],
    'view'
  >

  assignVested: TypedContractMethod<
    [
      _receiver: AddressLike,
      _amount: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _vested: BigNumberish,
      _revokable: boolean
    ],
    [bigint],
    'nonpayable'
  >

  getEVMScriptExecutor: TypedContractMethod<
    [_script: BytesLike],
    [string],
    'view'
  >

  getRecoveryVault: TypedContractMethod<[], [string], 'view'>

  getVesting: TypedContractMethod<
    [_recipient: AddressLike, _vestingId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        amount: bigint
        start: bigint
        cliff: bigint
        vesting: bigint
        revokable: boolean
      }
    ],
    'view'
  >

  mint: TypedContractMethod<
    [_receiver: AddressLike, _amount: BigNumberish],
    [void],
    'nonpayable'
  >

  onTransfer: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [boolean],
    'nonpayable'
  >

  transferableBalance: TypedContractMethod<
    [_holder: AddressLike, _time: BigNumberish],
    [bigint],
    'view'
  >

  allowRecoverability: TypedContractMethod<
    [_token: AddressLike],
    [boolean],
    'view'
  >

  appId: TypedContractMethod<[], [string], 'view'>

  ISSUE_ROLE: TypedContractMethod<[], [string], 'view'>

  getInitializationBlock: TypedContractMethod<[], [bigint], 'view'>

  vestingsLengths: TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>

  transferToVault: TypedContractMethod<
    [_token: AddressLike],
    [void],
    'nonpayable'
  >

  burn: TypedContractMethod<
    [_holder: AddressLike, _amount: BigNumberish],
    [void],
    'nonpayable'
  >

  canPerform: TypedContractMethod<
    [_sender: AddressLike, _role: BytesLike, _params: BigNumberish[]],
    [boolean],
    'view'
  >

  getEVMScriptRegistry: TypedContractMethod<[], [string], 'view'>

  ASSIGN_ROLE: TypedContractMethod<[], [string], 'view'>

  BURN_ROLE: TypedContractMethod<[], [string], 'view'>

  assign: TypedContractMethod<
    [_receiver: AddressLike, _amount: BigNumberish],
    [void],
    'nonpayable'
  >

  canForward: TypedContractMethod<
    [_sender: AddressLike, arg1: BytesLike],
    [boolean],
    'view'
  >

  issue: TypedContractMethod<[_amount: BigNumberish], [void], 'nonpayable'>

  kernel: TypedContractMethod<[], [string], 'view'>

  forward: TypedContractMethod<[_evmScript: BytesLike], [void], 'nonpayable'>

  onApprove: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    'nonpayable'
  >

  isPetrified: TypedContractMethod<[], [boolean], 'view'>

  initialize: TypedContractMethod<
    [
      _token: AddressLike,
      _transferable: boolean,
      _maxAccountTokens: BigNumberish
    ],
    [void],
    'nonpayable'
  >

  MINT_ROLE: TypedContractMethod<[], [string], 'view'>

  maxAccountTokens: TypedContractMethod<[], [bigint], 'view'>

  REVOKE_VESTINGS_ROLE: TypedContractMethod<[], [string], 'view'>

  proxyPayment: TypedContractMethod<[arg0: AddressLike], [boolean], 'payable'>

  revokeVesting: TypedContractMethod<
    [_holder: AddressLike, _vestingId: BigNumberish],
    [void],
    'nonpayable'
  >

  token: TypedContractMethod<[], [string], 'view'>

  isForwarder: TypedContractMethod<[], [boolean], 'view'>

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T

  getFunction(
    nameOrSignature: 'hasInitialized'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'MAX_VESTINGS_PER_ADDRESS'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'spendableBalanceOf'
  ): TypedContractMethod<[_holder: AddressLike], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'assignVested'
  ): TypedContractMethod<
    [
      _receiver: AddressLike,
      _amount: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _vested: BigNumberish,
      _revokable: boolean
    ],
    [bigint],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'getEVMScriptExecutor'
  ): TypedContractMethod<[_script: BytesLike], [string], 'view'>
  getFunction(
    nameOrSignature: 'getRecoveryVault'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(nameOrSignature: 'getVesting'): TypedContractMethod<
    [_recipient: AddressLike, _vestingId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        amount: bigint
        start: bigint
        cliff: bigint
        vesting: bigint
        revokable: boolean
      }
    ],
    'view'
  >
  getFunction(
    nameOrSignature: 'mint'
  ): TypedContractMethod<
    [_receiver: AddressLike, _amount: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'onTransfer'
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [boolean],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'transferableBalance'
  ): TypedContractMethod<
    [_holder: AddressLike, _time: BigNumberish],
    [bigint],
    'view'
  >
  getFunction(
    nameOrSignature: 'allowRecoverability'
  ): TypedContractMethod<[_token: AddressLike], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'appId'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'ISSUE_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'getInitializationBlock'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'vestingsLengths'
  ): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'transferToVault'
  ): TypedContractMethod<[_token: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'burn'
  ): TypedContractMethod<
    [_holder: AddressLike, _amount: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'canPerform'
  ): TypedContractMethod<
    [_sender: AddressLike, _role: BytesLike, _params: BigNumberish[]],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'getEVMScriptRegistry'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'ASSIGN_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'BURN_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'assign'
  ): TypedContractMethod<
    [_receiver: AddressLike, _amount: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'canForward'
  ): TypedContractMethod<
    [_sender: AddressLike, arg1: BytesLike],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'issue'
  ): TypedContractMethod<[_amount: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'kernel'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'forward'
  ): TypedContractMethod<[_evmScript: BytesLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'onApprove'
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'isPetrified'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _transferable: boolean,
      _maxAccountTokens: BigNumberish
    ],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'MINT_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'maxAccountTokens'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'REVOKE_VESTINGS_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'proxyPayment'
  ): TypedContractMethod<[arg0: AddressLike], [boolean], 'payable'>
  getFunction(
    nameOrSignature: 'revokeVesting'
  ): TypedContractMethod<
    [_holder: AddressLike, _vestingId: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'token'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'isForwarder'
  ): TypedContractMethod<[], [boolean], 'view'>

  getEvent(
    key: 'NewVesting'
  ): TypedContractEvent<
    NewVestingEvent.InputTuple,
    NewVestingEvent.OutputTuple,
    NewVestingEvent.OutputObject
  >
  getEvent(
    key: 'RevokeVesting'
  ): TypedContractEvent<
    RevokeVestingEvent.InputTuple,
    RevokeVestingEvent.OutputTuple,
    RevokeVestingEvent.OutputObject
  >
  getEvent(
    key: 'ScriptResult'
  ): TypedContractEvent<
    ScriptResultEvent.InputTuple,
    ScriptResultEvent.OutputTuple,
    ScriptResultEvent.OutputObject
  >
  getEvent(
    key: 'RecoverToVault'
  ): TypedContractEvent<
    RecoverToVaultEvent.InputTuple,
    RecoverToVaultEvent.OutputTuple,
    RecoverToVaultEvent.OutputObject
  >

  filters: {
    'NewVesting(address,uint256,uint256)': TypedContractEvent<
      NewVestingEvent.InputTuple,
      NewVestingEvent.OutputTuple,
      NewVestingEvent.OutputObject
    >
    NewVesting: TypedContractEvent<
      NewVestingEvent.InputTuple,
      NewVestingEvent.OutputTuple,
      NewVestingEvent.OutputObject
    >

    'RevokeVesting(address,uint256,uint256)': TypedContractEvent<
      RevokeVestingEvent.InputTuple,
      RevokeVestingEvent.OutputTuple,
      RevokeVestingEvent.OutputObject
    >
    RevokeVesting: TypedContractEvent<
      RevokeVestingEvent.InputTuple,
      RevokeVestingEvent.OutputTuple,
      RevokeVestingEvent.OutputObject
    >

    'ScriptResult(address,bytes,bytes,bytes)': TypedContractEvent<
      ScriptResultEvent.InputTuple,
      ScriptResultEvent.OutputTuple,
      ScriptResultEvent.OutputObject
    >
    ScriptResult: TypedContractEvent<
      ScriptResultEvent.InputTuple,
      ScriptResultEvent.OutputTuple,
      ScriptResultEvent.OutputObject
    >

    'RecoverToVault(address,address,uint256)': TypedContractEvent<
      RecoverToVaultEvent.InputTuple,
      RecoverToVaultEvent.OutputTuple,
      RecoverToVaultEvent.OutputObject
    >
    RecoverToVault: TypedContractEvent<
      RecoverToVaultEvent.InputTuple,
      RecoverToVaultEvent.OutputTuple,
      RecoverToVaultEvent.OutputObject
    >
  }
}
