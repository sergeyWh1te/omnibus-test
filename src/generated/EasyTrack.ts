/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common'

export declare namespace EasyTrack {
  export type MotionStruct = {
    id: BigNumberish
    evmScriptFactory: AddressLike
    creator: AddressLike
    duration: BigNumberish
    startDate: BigNumberish
    snapshotBlock: BigNumberish
    objectionsThreshold: BigNumberish
    objectionsAmount: BigNumberish
    evmScriptHash: BytesLike
  }

  export type MotionStructOutput = [
    id: bigint,
    evmScriptFactory: string,
    creator: string,
    duration: bigint,
    startDate: bigint,
    snapshotBlock: bigint,
    objectionsThreshold: bigint,
    objectionsAmount: bigint,
    evmScriptHash: string
  ] & {
    id: bigint
    evmScriptFactory: string
    creator: string
    duration: bigint
    startDate: bigint
    snapshotBlock: bigint
    objectionsThreshold: bigint
    objectionsAmount: bigint
    evmScriptHash: string
  }
}

export interface EasyTrackInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'CANCEL_ROLE'
      | 'DEFAULT_ADMIN_ROLE'
      | 'MAX_MOTIONS_LIMIT'
      | 'MAX_OBJECTIONS_THRESHOLD'
      | 'MIN_MOTION_DURATION'
      | 'PAUSE_ROLE'
      | 'UNPAUSE_ROLE'
      | 'addEVMScriptFactory'
      | 'canObjectToMotion'
      | 'cancelAllMotions'
      | 'cancelMotion'
      | 'cancelMotions'
      | 'createMotion'
      | 'enactMotion'
      | 'evmScriptExecutor'
      | 'evmScriptFactories'
      | 'evmScriptFactoryPermissions'
      | 'getEVMScriptFactories'
      | 'getMotion'
      | 'getMotions'
      | 'getRoleAdmin'
      | 'governanceToken'
      | 'grantRole'
      | 'hasRole'
      | 'isEVMScriptFactory'
      | 'motionDuration'
      | 'motions'
      | 'motionsCountLimit'
      | 'objectToMotion'
      | 'objections'
      | 'objectionsThreshold'
      | 'pause'
      | 'paused'
      | 'removeEVMScriptFactory'
      | 'renounceRole'
      | 'revokeRole'
      | 'setEVMScriptExecutor'
      | 'setMotionDuration'
      | 'setMotionsCountLimit'
      | 'setObjectionsThreshold'
      | 'supportsInterface'
      | 'unpause'
  ): FunctionFragment

  getEvent(
    nameOrSignatureOrTopic:
      | 'EVMScriptExecutorChanged'
      | 'EVMScriptFactoryAdded'
      | 'EVMScriptFactoryRemoved'
      | 'MotionCanceled'
      | 'MotionCreated'
      | 'MotionDurationChanged'
      | 'MotionEnacted'
      | 'MotionObjected'
      | 'MotionRejected'
      | 'MotionsCountLimitChanged'
      | 'ObjectionsThresholdChanged'
      | 'Paused'
      | 'RoleAdminChanged'
      | 'RoleGranted'
      | 'RoleRevoked'
      | 'Unpaused'
  ): EventFragment

  encodeFunctionData(
    functionFragment: 'CANCEL_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'MAX_MOTIONS_LIMIT',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'MAX_OBJECTIONS_THRESHOLD',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'MIN_MOTION_DURATION',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'PAUSE_ROLE', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'UNPAUSE_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'addEVMScriptFactory',
    values: [AddressLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'canObjectToMotion',
    values: [BigNumberish, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'cancelAllMotions',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'cancelMotion',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'cancelMotions',
    values: [BigNumberish[]]
  ): string
  encodeFunctionData(
    functionFragment: 'createMotion',
    values: [AddressLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'enactMotion',
    values: [BigNumberish, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'evmScriptExecutor',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'evmScriptFactories',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'evmScriptFactoryPermissions',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getEVMScriptFactories',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getMotion',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'getMotions', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'governanceToken',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'isEVMScriptFactory',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'motionDuration',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'motions',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'motionsCountLimit',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'objectToMotion',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'objections',
    values: [BigNumberish, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'objectionsThreshold',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'removeEVMScriptFactory',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'setEVMScriptExecutor',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'setMotionDuration',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setMotionsCountLimit',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setObjectionsThreshold',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string

  decodeFunctionResult(functionFragment: 'CANCEL_ROLE', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'MAX_MOTIONS_LIMIT',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'MAX_OBJECTIONS_THRESHOLD',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'MIN_MOTION_DURATION',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'PAUSE_ROLE', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'UNPAUSE_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'addEVMScriptFactory',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'canObjectToMotion',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'cancelAllMotions',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'cancelMotion',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'cancelMotions',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'createMotion',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'enactMotion', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'evmScriptExecutor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'evmScriptFactories',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'evmScriptFactoryPermissions',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getEVMScriptFactories',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getMotion', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getMotions', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'governanceToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isEVMScriptFactory',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'motionDuration',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'motions', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'motionsCountLimit',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'objectToMotion',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'objections', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'objectionsThreshold',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removeEVMScriptFactory',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setEVMScriptExecutor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setMotionDuration',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setMotionsCountLimit',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setObjectionsThreshold',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
}

export namespace EVMScriptExecutorChangedEvent {
  export type InputTuple = [_evmScriptExecutor: AddressLike]
  export type OutputTuple = [_evmScriptExecutor: string]
  export interface OutputObject {
    _evmScriptExecutor: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace EVMScriptFactoryAddedEvent {
  export type InputTuple = [
    _evmScriptFactory: AddressLike,
    _permissions: BytesLike
  ]
  export type OutputTuple = [_evmScriptFactory: string, _permissions: string]
  export interface OutputObject {
    _evmScriptFactory: string
    _permissions: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace EVMScriptFactoryRemovedEvent {
  export type InputTuple = [_evmScriptFactory: AddressLike]
  export type OutputTuple = [_evmScriptFactory: string]
  export interface OutputObject {
    _evmScriptFactory: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace MotionCanceledEvent {
  export type InputTuple = [_motionId: BigNumberish]
  export type OutputTuple = [_motionId: bigint]
  export interface OutputObject {
    _motionId: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace MotionCreatedEvent {
  export type InputTuple = [
    _motionId: BigNumberish,
    _creator: AddressLike,
    _evmScriptFactory: AddressLike,
    _evmScriptCallData: BytesLike,
    _evmScript: BytesLike
  ]
  export type OutputTuple = [
    _motionId: bigint,
    _creator: string,
    _evmScriptFactory: string,
    _evmScriptCallData: string,
    _evmScript: string
  ]
  export interface OutputObject {
    _motionId: bigint
    _creator: string
    _evmScriptFactory: string
    _evmScriptCallData: string
    _evmScript: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace MotionDurationChangedEvent {
  export type InputTuple = [_motionDuration: BigNumberish]
  export type OutputTuple = [_motionDuration: bigint]
  export interface OutputObject {
    _motionDuration: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace MotionEnactedEvent {
  export type InputTuple = [_motionId: BigNumberish]
  export type OutputTuple = [_motionId: bigint]
  export interface OutputObject {
    _motionId: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace MotionObjectedEvent {
  export type InputTuple = [
    _motionId: BigNumberish,
    _objector: AddressLike,
    _weight: BigNumberish,
    _newObjectionsAmount: BigNumberish,
    _newObjectionsAmountPct: BigNumberish
  ]
  export type OutputTuple = [
    _motionId: bigint,
    _objector: string,
    _weight: bigint,
    _newObjectionsAmount: bigint,
    _newObjectionsAmountPct: bigint
  ]
  export interface OutputObject {
    _motionId: bigint
    _objector: string
    _weight: bigint
    _newObjectionsAmount: bigint
    _newObjectionsAmountPct: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace MotionRejectedEvent {
  export type InputTuple = [_motionId: BigNumberish]
  export type OutputTuple = [_motionId: bigint]
  export interface OutputObject {
    _motionId: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace MotionsCountLimitChangedEvent {
  export type InputTuple = [_newMotionsCountLimit: BigNumberish]
  export type OutputTuple = [_newMotionsCountLimit: bigint]
  export interface OutputObject {
    _newMotionsCountLimit: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ObjectionsThresholdChangedEvent {
  export type InputTuple = [_newThreshold: BigNumberish]
  export type OutputTuple = [_newThreshold: bigint]
  export interface OutputObject {
    _newThreshold: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike]
  export type OutputTuple = [account: string]
  export interface OutputObject {
    account: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ]
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ]
  export interface OutputObject {
    role: string
    previousAdminRole: string
    newAdminRole: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ]
  export type OutputTuple = [role: string, account: string, sender: string]
  export interface OutputObject {
    role: string
    account: string
    sender: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ]
  export type OutputTuple = [role: string, account: string, sender: string]
  export interface OutputObject {
    role: string
    account: string
    sender: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike]
  export type OutputTuple = [account: string]
  export interface OutputObject {
    account: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface EasyTrack extends BaseContract {
  connect(runner?: ContractRunner | null): EasyTrack
  waitForDeployment(): Promise<this>

  interface: EasyTrackInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>

  CANCEL_ROLE: TypedContractMethod<[], [string], 'view'>

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], 'view'>

  MAX_MOTIONS_LIMIT: TypedContractMethod<[], [bigint], 'view'>

  MAX_OBJECTIONS_THRESHOLD: TypedContractMethod<[], [bigint], 'view'>

  MIN_MOTION_DURATION: TypedContractMethod<[], [bigint], 'view'>

  PAUSE_ROLE: TypedContractMethod<[], [string], 'view'>

  UNPAUSE_ROLE: TypedContractMethod<[], [string], 'view'>

  addEVMScriptFactory: TypedContractMethod<
    [_evmScriptFactory: AddressLike, _permissions: BytesLike],
    [void],
    'nonpayable'
  >

  canObjectToMotion: TypedContractMethod<
    [_motionId: BigNumberish, _objector: AddressLike],
    [boolean],
    'view'
  >

  cancelAllMotions: TypedContractMethod<[], [void], 'nonpayable'>

  cancelMotion: TypedContractMethod<
    [_motionId: BigNumberish],
    [void],
    'nonpayable'
  >

  cancelMotions: TypedContractMethod<
    [_motionIds: BigNumberish[]],
    [void],
    'nonpayable'
  >

  createMotion: TypedContractMethod<
    [_evmScriptFactory: AddressLike, _evmScriptCallData: BytesLike],
    [bigint],
    'nonpayable'
  >

  enactMotion: TypedContractMethod<
    [_motionId: BigNumberish, _evmScriptCallData: BytesLike],
    [void],
    'nonpayable'
  >

  evmScriptExecutor: TypedContractMethod<[], [string], 'view'>

  evmScriptFactories: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    'view'
  >

  evmScriptFactoryPermissions: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    'view'
  >

  getEVMScriptFactories: TypedContractMethod<[], [string[]], 'view'>

  getMotion: TypedContractMethod<
    [_motionId: BigNumberish],
    [EasyTrack.MotionStructOutput],
    'view'
  >

  getMotions: TypedContractMethod<[], [EasyTrack.MotionStructOutput[]], 'view'>

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], 'view'>

  governanceToken: TypedContractMethod<[], [string], 'view'>

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    'view'
  >

  isEVMScriptFactory: TypedContractMethod<
    [_maybeEVMScriptFactory: AddressLike],
    [boolean],
    'view'
  >

  motionDuration: TypedContractMethod<[], [bigint], 'view'>

  motions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        id: bigint
        evmScriptFactory: string
        creator: string
        duration: bigint
        startDate: bigint
        snapshotBlock: bigint
        objectionsThreshold: bigint
        objectionsAmount: bigint
        evmScriptHash: string
      }
    ],
    'view'
  >

  motionsCountLimit: TypedContractMethod<[], [bigint], 'view'>

  objectToMotion: TypedContractMethod<
    [_motionId: BigNumberish],
    [void],
    'nonpayable'
  >

  objections: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    'view'
  >

  objectionsThreshold: TypedContractMethod<[], [bigint], 'view'>

  pause: TypedContractMethod<[], [void], 'nonpayable'>

  paused: TypedContractMethod<[], [boolean], 'view'>

  removeEVMScriptFactory: TypedContractMethod<
    [_evmScriptFactory: AddressLike],
    [void],
    'nonpayable'
  >

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >

  setEVMScriptExecutor: TypedContractMethod<
    [_evmScriptExecutor: AddressLike],
    [void],
    'nonpayable'
  >

  setMotionDuration: TypedContractMethod<
    [_motionDuration: BigNumberish],
    [void],
    'nonpayable'
  >

  setMotionsCountLimit: TypedContractMethod<
    [_motionsCountLimit: BigNumberish],
    [void],
    'nonpayable'
  >

  setObjectionsThreshold: TypedContractMethod<
    [_objectionsThreshold: BigNumberish],
    [void],
    'nonpayable'
  >

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    'view'
  >

  unpause: TypedContractMethod<[], [void], 'nonpayable'>

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T

  getFunction(
    nameOrSignature: 'CANCEL_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'DEFAULT_ADMIN_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'MAX_MOTIONS_LIMIT'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'MAX_OBJECTIONS_THRESHOLD'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'MIN_MOTION_DURATION'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'PAUSE_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'UNPAUSE_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'addEVMScriptFactory'
  ): TypedContractMethod<
    [_evmScriptFactory: AddressLike, _permissions: BytesLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'canObjectToMotion'
  ): TypedContractMethod<
    [_motionId: BigNumberish, _objector: AddressLike],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'cancelAllMotions'
  ): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'cancelMotion'
  ): TypedContractMethod<[_motionId: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'cancelMotions'
  ): TypedContractMethod<[_motionIds: BigNumberish[]], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'createMotion'
  ): TypedContractMethod<
    [_evmScriptFactory: AddressLike, _evmScriptCallData: BytesLike],
    [bigint],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'enactMotion'
  ): TypedContractMethod<
    [_motionId: BigNumberish, _evmScriptCallData: BytesLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'evmScriptExecutor'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'evmScriptFactories'
  ): TypedContractMethod<[arg0: BigNumberish], [string], 'view'>
  getFunction(
    nameOrSignature: 'evmScriptFactoryPermissions'
  ): TypedContractMethod<[arg0: AddressLike], [string], 'view'>
  getFunction(
    nameOrSignature: 'getEVMScriptFactories'
  ): TypedContractMethod<[], [string[]], 'view'>
  getFunction(
    nameOrSignature: 'getMotion'
  ): TypedContractMethod<
    [_motionId: BigNumberish],
    [EasyTrack.MotionStructOutput],
    'view'
  >
  getFunction(
    nameOrSignature: 'getMotions'
  ): TypedContractMethod<[], [EasyTrack.MotionStructOutput[]], 'view'>
  getFunction(
    nameOrSignature: 'getRoleAdmin'
  ): TypedContractMethod<[role: BytesLike], [string], 'view'>
  getFunction(
    nameOrSignature: 'governanceToken'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'grantRole'
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'hasRole'
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'isEVMScriptFactory'
  ): TypedContractMethod<
    [_maybeEVMScriptFactory: AddressLike],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'motionDuration'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(nameOrSignature: 'motions'): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        id: bigint
        evmScriptFactory: string
        creator: string
        duration: bigint
        startDate: bigint
        snapshotBlock: bigint
        objectionsThreshold: bigint
        objectionsAmount: bigint
        evmScriptHash: string
      }
    ],
    'view'
  >
  getFunction(
    nameOrSignature: 'motionsCountLimit'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'objectToMotion'
  ): TypedContractMethod<[_motionId: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'objections'
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'objectionsThreshold'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'pause'
  ): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'paused'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'removeEVMScriptFactory'
  ): TypedContractMethod<[_evmScriptFactory: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'renounceRole'
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'revokeRole'
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'setEVMScriptExecutor'
  ): TypedContractMethod<
    [_evmScriptExecutor: AddressLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'setMotionDuration'
  ): TypedContractMethod<[_motionDuration: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'setMotionsCountLimit'
  ): TypedContractMethod<
    [_motionsCountLimit: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'setObjectionsThreshold'
  ): TypedContractMethod<
    [_objectionsThreshold: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'supportsInterface'
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'unpause'
  ): TypedContractMethod<[], [void], 'nonpayable'>

  getEvent(
    key: 'EVMScriptExecutorChanged'
  ): TypedContractEvent<
    EVMScriptExecutorChangedEvent.InputTuple,
    EVMScriptExecutorChangedEvent.OutputTuple,
    EVMScriptExecutorChangedEvent.OutputObject
  >
  getEvent(
    key: 'EVMScriptFactoryAdded'
  ): TypedContractEvent<
    EVMScriptFactoryAddedEvent.InputTuple,
    EVMScriptFactoryAddedEvent.OutputTuple,
    EVMScriptFactoryAddedEvent.OutputObject
  >
  getEvent(
    key: 'EVMScriptFactoryRemoved'
  ): TypedContractEvent<
    EVMScriptFactoryRemovedEvent.InputTuple,
    EVMScriptFactoryRemovedEvent.OutputTuple,
    EVMScriptFactoryRemovedEvent.OutputObject
  >
  getEvent(
    key: 'MotionCanceled'
  ): TypedContractEvent<
    MotionCanceledEvent.InputTuple,
    MotionCanceledEvent.OutputTuple,
    MotionCanceledEvent.OutputObject
  >
  getEvent(
    key: 'MotionCreated'
  ): TypedContractEvent<
    MotionCreatedEvent.InputTuple,
    MotionCreatedEvent.OutputTuple,
    MotionCreatedEvent.OutputObject
  >
  getEvent(
    key: 'MotionDurationChanged'
  ): TypedContractEvent<
    MotionDurationChangedEvent.InputTuple,
    MotionDurationChangedEvent.OutputTuple,
    MotionDurationChangedEvent.OutputObject
  >
  getEvent(
    key: 'MotionEnacted'
  ): TypedContractEvent<
    MotionEnactedEvent.InputTuple,
    MotionEnactedEvent.OutputTuple,
    MotionEnactedEvent.OutputObject
  >
  getEvent(
    key: 'MotionObjected'
  ): TypedContractEvent<
    MotionObjectedEvent.InputTuple,
    MotionObjectedEvent.OutputTuple,
    MotionObjectedEvent.OutputObject
  >
  getEvent(
    key: 'MotionRejected'
  ): TypedContractEvent<
    MotionRejectedEvent.InputTuple,
    MotionRejectedEvent.OutputTuple,
    MotionRejectedEvent.OutputObject
  >
  getEvent(
    key: 'MotionsCountLimitChanged'
  ): TypedContractEvent<
    MotionsCountLimitChangedEvent.InputTuple,
    MotionsCountLimitChangedEvent.OutputTuple,
    MotionsCountLimitChangedEvent.OutputObject
  >
  getEvent(
    key: 'ObjectionsThresholdChanged'
  ): TypedContractEvent<
    ObjectionsThresholdChangedEvent.InputTuple,
    ObjectionsThresholdChangedEvent.OutputTuple,
    ObjectionsThresholdChangedEvent.OutputObject
  >
  getEvent(
    key: 'Paused'
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >
  getEvent(
    key: 'RoleAdminChanged'
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >
  getEvent(
    key: 'RoleGranted'
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >
  getEvent(
    key: 'RoleRevoked'
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >
  getEvent(
    key: 'Unpaused'
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >

  filters: {
    'EVMScriptExecutorChanged(address)': TypedContractEvent<
      EVMScriptExecutorChangedEvent.InputTuple,
      EVMScriptExecutorChangedEvent.OutputTuple,
      EVMScriptExecutorChangedEvent.OutputObject
    >
    EVMScriptExecutorChanged: TypedContractEvent<
      EVMScriptExecutorChangedEvent.InputTuple,
      EVMScriptExecutorChangedEvent.OutputTuple,
      EVMScriptExecutorChangedEvent.OutputObject
    >

    'EVMScriptFactoryAdded(address,bytes)': TypedContractEvent<
      EVMScriptFactoryAddedEvent.InputTuple,
      EVMScriptFactoryAddedEvent.OutputTuple,
      EVMScriptFactoryAddedEvent.OutputObject
    >
    EVMScriptFactoryAdded: TypedContractEvent<
      EVMScriptFactoryAddedEvent.InputTuple,
      EVMScriptFactoryAddedEvent.OutputTuple,
      EVMScriptFactoryAddedEvent.OutputObject
    >

    'EVMScriptFactoryRemoved(address)': TypedContractEvent<
      EVMScriptFactoryRemovedEvent.InputTuple,
      EVMScriptFactoryRemovedEvent.OutputTuple,
      EVMScriptFactoryRemovedEvent.OutputObject
    >
    EVMScriptFactoryRemoved: TypedContractEvent<
      EVMScriptFactoryRemovedEvent.InputTuple,
      EVMScriptFactoryRemovedEvent.OutputTuple,
      EVMScriptFactoryRemovedEvent.OutputObject
    >

    'MotionCanceled(uint256)': TypedContractEvent<
      MotionCanceledEvent.InputTuple,
      MotionCanceledEvent.OutputTuple,
      MotionCanceledEvent.OutputObject
    >
    MotionCanceled: TypedContractEvent<
      MotionCanceledEvent.InputTuple,
      MotionCanceledEvent.OutputTuple,
      MotionCanceledEvent.OutputObject
    >

    'MotionCreated(uint256,address,address,bytes,bytes)': TypedContractEvent<
      MotionCreatedEvent.InputTuple,
      MotionCreatedEvent.OutputTuple,
      MotionCreatedEvent.OutputObject
    >
    MotionCreated: TypedContractEvent<
      MotionCreatedEvent.InputTuple,
      MotionCreatedEvent.OutputTuple,
      MotionCreatedEvent.OutputObject
    >

    'MotionDurationChanged(uint256)': TypedContractEvent<
      MotionDurationChangedEvent.InputTuple,
      MotionDurationChangedEvent.OutputTuple,
      MotionDurationChangedEvent.OutputObject
    >
    MotionDurationChanged: TypedContractEvent<
      MotionDurationChangedEvent.InputTuple,
      MotionDurationChangedEvent.OutputTuple,
      MotionDurationChangedEvent.OutputObject
    >

    'MotionEnacted(uint256)': TypedContractEvent<
      MotionEnactedEvent.InputTuple,
      MotionEnactedEvent.OutputTuple,
      MotionEnactedEvent.OutputObject
    >
    MotionEnacted: TypedContractEvent<
      MotionEnactedEvent.InputTuple,
      MotionEnactedEvent.OutputTuple,
      MotionEnactedEvent.OutputObject
    >

    'MotionObjected(uint256,address,uint256,uint256,uint256)': TypedContractEvent<
      MotionObjectedEvent.InputTuple,
      MotionObjectedEvent.OutputTuple,
      MotionObjectedEvent.OutputObject
    >
    MotionObjected: TypedContractEvent<
      MotionObjectedEvent.InputTuple,
      MotionObjectedEvent.OutputTuple,
      MotionObjectedEvent.OutputObject
    >

    'MotionRejected(uint256)': TypedContractEvent<
      MotionRejectedEvent.InputTuple,
      MotionRejectedEvent.OutputTuple,
      MotionRejectedEvent.OutputObject
    >
    MotionRejected: TypedContractEvent<
      MotionRejectedEvent.InputTuple,
      MotionRejectedEvent.OutputTuple,
      MotionRejectedEvent.OutputObject
    >

    'MotionsCountLimitChanged(uint256)': TypedContractEvent<
      MotionsCountLimitChangedEvent.InputTuple,
      MotionsCountLimitChangedEvent.OutputTuple,
      MotionsCountLimitChangedEvent.OutputObject
    >
    MotionsCountLimitChanged: TypedContractEvent<
      MotionsCountLimitChangedEvent.InputTuple,
      MotionsCountLimitChangedEvent.OutputTuple,
      MotionsCountLimitChangedEvent.OutputObject
    >

    'ObjectionsThresholdChanged(uint256)': TypedContractEvent<
      ObjectionsThresholdChangedEvent.InputTuple,
      ObjectionsThresholdChangedEvent.OutputTuple,
      ObjectionsThresholdChangedEvent.OutputObject
    >
    ObjectionsThresholdChanged: TypedContractEvent<
      ObjectionsThresholdChangedEvent.InputTuple,
      ObjectionsThresholdChangedEvent.OutputTuple,
      ObjectionsThresholdChangedEvent.OutputObject
    >

    'Paused(address)': TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >

    'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >

    'RoleGranted(bytes32,address,address)': TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >

    'RoleRevoked(bytes32,address,address)': TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >

    'Unpaused(address)': TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >
  }
}
