/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from './common'

export interface AddAllowedRecipientInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'allowedRecipientsRegistry'
      | 'createEVMScript'
      | 'decodeEVMScriptCallData'
      | 'trustedCaller'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'allowedRecipientsRegistry',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'createEVMScript',
    values: [AddressLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'decodeEVMScriptCallData',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'trustedCaller',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'allowedRecipientsRegistry',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'createEVMScript',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'decodeEVMScriptCallData',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'trustedCaller',
    data: BytesLike
  ): Result
}

export interface AddAllowedRecipient extends BaseContract {
  connect(runner?: ContractRunner | null): AddAllowedRecipient
  waitForDeployment(): Promise<this>

  interface: AddAllowedRecipientInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>

  allowedRecipientsRegistry: TypedContractMethod<[], [string], 'view'>

  createEVMScript: TypedContractMethod<
    [_creator: AddressLike, _evmScriptCallData: BytesLike],
    [string],
    'view'
  >

  decodeEVMScriptCallData: TypedContractMethod<
    [_evmScriptCallData: BytesLike],
    [[string, string]],
    'view'
  >

  trustedCaller: TypedContractMethod<[], [string], 'view'>

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T

  getFunction(
    nameOrSignature: 'allowedRecipientsRegistry'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'createEVMScript'
  ): TypedContractMethod<
    [_creator: AddressLike, _evmScriptCallData: BytesLike],
    [string],
    'view'
  >
  getFunction(
    nameOrSignature: 'decodeEVMScriptCallData'
  ): TypedContractMethod<
    [_evmScriptCallData: BytesLike],
    [[string, string]],
    'view'
  >
  getFunction(
    nameOrSignature: 'trustedCaller'
  ): TypedContractMethod<[], [string], 'view'>

  filters: {}
}
