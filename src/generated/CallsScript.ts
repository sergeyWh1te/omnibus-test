/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common'

export interface CallsScriptInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'hasInitialized'
      | 'execScript'
      | 'executorType'
      | 'getInitializationBlock'
      | 'isPetrified'
  ): FunctionFragment

  getEvent(nameOrSignatureOrTopic: 'LogScriptCall'): EventFragment

  encodeFunctionData(
    functionFragment: 'hasInitialized',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'execScript',
    values: [BytesLike, BytesLike, AddressLike[]]
  ): string
  encodeFunctionData(
    functionFragment: 'executorType',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getInitializationBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'isPetrified',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'hasInitialized',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'execScript', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'executorType',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getInitializationBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'isPetrified', data: BytesLike): Result
}

export namespace LogScriptCallEvent {
  export type InputTuple = [
    sender: AddressLike,
    src: AddressLike,
    dst: AddressLike
  ]
  export type OutputTuple = [sender: string, src: string, dst: string]
  export interface OutputObject {
    sender: string
    src: string
    dst: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface CallsScript extends BaseContract {
  connect(runner?: ContractRunner | null): CallsScript
  waitForDeployment(): Promise<this>

  interface: CallsScriptInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>

  hasInitialized: TypedContractMethod<[], [boolean], 'view'>

  execScript: TypedContractMethod<
    [_script: BytesLike, arg1: BytesLike, _blacklist: AddressLike[]],
    [string],
    'nonpayable'
  >

  executorType: TypedContractMethod<[], [string], 'view'>

  getInitializationBlock: TypedContractMethod<[], [bigint], 'view'>

  isPetrified: TypedContractMethod<[], [boolean], 'view'>

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T

  getFunction(
    nameOrSignature: 'hasInitialized'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'execScript'
  ): TypedContractMethod<
    [_script: BytesLike, arg1: BytesLike, _blacklist: AddressLike[]],
    [string],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'executorType'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'getInitializationBlock'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'isPetrified'
  ): TypedContractMethod<[], [boolean], 'view'>

  getEvent(
    key: 'LogScriptCall'
  ): TypedContractEvent<
    LogScriptCallEvent.InputTuple,
    LogScriptCallEvent.OutputTuple,
    LogScriptCallEvent.OutputObject
  >

  filters: {
    'LogScriptCall(address,address,address)': TypedContractEvent<
      LogScriptCallEvent.InputTuple,
      LogScriptCallEvent.OutputTuple,
      LogScriptCallEvent.OutputObject
    >
    LogScriptCall: TypedContractEvent<
      LogScriptCallEvent.InputTuple,
      LogScriptCallEvent.OutputTuple,
      LogScriptCallEvent.OutputObject
    >
  }
}
