/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from 'ethers'
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from '@nomicfoundation/hardhat-ethers/types'

import * as Contracts from './index'

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'ACL',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ACL__factory>
    getContractFactory(
      name: 'AddAllowedRecipient',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddAllowedRecipient__factory>
    getContractFactory(
      name: 'Agent',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Agent__factory>
    getContractFactory(
      name: 'AllowedRecipientsRegistry',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AllowedRecipientsRegistry__factory>
    getContractFactory(
      name: 'AppProxyPinned',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AppProxyPinned__factory>
    getContractFactory(
      name: 'AppProxyUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AppProxyUpgradeable__factory>
    getContractFactory(
      name: 'Burner',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Burner__factory>
    getContractFactory(
      name: 'CallsScript',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallsScript__factory>
    getContractFactory(
      name: 'EasyTrack',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EasyTrack__factory>
    getContractFactory(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>
    getContractFactory(
      name: 'EVMScriptRegistry',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EVMScriptRegistry__factory>
    getContractFactory(
      name: 'Finance',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Finance__factory>
    getContractFactory(
      name: 'InsuranceFund',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InsuranceFund__factory>
    getContractFactory(
      name: 'Kernel',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Kernel__factory>
    getContractFactory(
      name: 'KernelProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KernelProxy__factory>
    getContractFactory(
      name: 'Lido',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lido__factory>
    getContractFactory(
      name: 'MiniMeToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MiniMeToken__factory>
    getContractFactory(
      name: 'NodeOperatorsRegistry',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NodeOperatorsRegistry__factory>
    getContractFactory(
      name: 'TokenManager',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenManager__factory>
    getContractFactory(
      name: 'Voting',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Voting__factory>

    getContractAt(
      name: 'ACL',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ACL>
    getContractAt(
      name: 'AddAllowedRecipient',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AddAllowedRecipient>
    getContractAt(
      name: 'Agent',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Agent>
    getContractAt(
      name: 'AllowedRecipientsRegistry',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AllowedRecipientsRegistry>
    getContractAt(
      name: 'AppProxyPinned',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AppProxyPinned>
    getContractAt(
      name: 'AppProxyUpgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AppProxyUpgradeable>
    getContractAt(
      name: 'Burner',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Burner>
    getContractAt(
      name: 'CallsScript',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CallsScript>
    getContractAt(
      name: 'EasyTrack',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EasyTrack>
    getContractAt(
      name: 'ERC20',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>
    getContractAt(
      name: 'EVMScriptRegistry',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EVMScriptRegistry>
    getContractAt(
      name: 'Finance',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Finance>
    getContractAt(
      name: 'InsuranceFund',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InsuranceFund>
    getContractAt(
      name: 'Kernel',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Kernel>
    getContractAt(
      name: 'KernelProxy',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.KernelProxy>
    getContractAt(
      name: 'Lido',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Lido>
    getContractAt(
      name: 'MiniMeToken',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MiniMeToken>
    getContractAt(
      name: 'NodeOperatorsRegistry',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NodeOperatorsRegistry>
    getContractAt(
      name: 'TokenManager',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenManager>
    getContractAt(
      name: 'Voting',
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Voting>

    deployContract(
      name: 'ACL',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ACL>
    deployContract(
      name: 'AddAllowedRecipient',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddAllowedRecipient>
    deployContract(
      name: 'Agent',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Agent>
    deployContract(
      name: 'AllowedRecipientsRegistry',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AllowedRecipientsRegistry>
    deployContract(
      name: 'AppProxyPinned',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppProxyPinned>
    deployContract(
      name: 'AppProxyUpgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppProxyUpgradeable>
    deployContract(
      name: 'Burner',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Burner>
    deployContract(
      name: 'CallsScript',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CallsScript>
    deployContract(
      name: 'EasyTrack',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EasyTrack>
    deployContract(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>
    deployContract(
      name: 'EVMScriptRegistry',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EVMScriptRegistry>
    deployContract(
      name: 'Finance',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Finance>
    deployContract(
      name: 'InsuranceFund',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InsuranceFund>
    deployContract(
      name: 'Kernel',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Kernel>
    deployContract(
      name: 'KernelProxy',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KernelProxy>
    deployContract(
      name: 'Lido',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Lido>
    deployContract(
      name: 'MiniMeToken',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MiniMeToken>
    deployContract(
      name: 'NodeOperatorsRegistry',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NodeOperatorsRegistry>
    deployContract(
      name: 'TokenManager',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenManager>
    deployContract(
      name: 'Voting',
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Voting>

    deployContract(
      name: 'ACL',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ACL>
    deployContract(
      name: 'AddAllowedRecipient',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddAllowedRecipient>
    deployContract(
      name: 'Agent',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Agent>
    deployContract(
      name: 'AllowedRecipientsRegistry',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AllowedRecipientsRegistry>
    deployContract(
      name: 'AppProxyPinned',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppProxyPinned>
    deployContract(
      name: 'AppProxyUpgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppProxyUpgradeable>
    deployContract(
      name: 'Burner',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Burner>
    deployContract(
      name: 'CallsScript',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CallsScript>
    deployContract(
      name: 'EasyTrack',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EasyTrack>
    deployContract(
      name: 'ERC20',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>
    deployContract(
      name: 'EVMScriptRegistry',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EVMScriptRegistry>
    deployContract(
      name: 'Finance',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Finance>
    deployContract(
      name: 'InsuranceFund',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InsuranceFund>
    deployContract(
      name: 'Kernel',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Kernel>
    deployContract(
      name: 'KernelProxy',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KernelProxy>
    deployContract(
      name: 'Lido',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Lido>
    deployContract(
      name: 'MiniMeToken',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MiniMeToken>
    deployContract(
      name: 'NodeOperatorsRegistry',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NodeOperatorsRegistry>
    deployContract(
      name: 'TokenManager',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenManager>
    deployContract(
      name: 'Voting',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Voting>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>
  }
}
