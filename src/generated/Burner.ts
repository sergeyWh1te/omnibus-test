/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common'

export interface BurnerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'DEFAULT_ADMIN_ROLE'
      | 'REQUEST_BURN_MY_STETH_ROLE'
      | 'REQUEST_BURN_SHARES_ROLE'
      | 'STETH'
      | 'TREASURY'
      | 'commitSharesToBurn'
      | 'getCoverSharesBurnt'
      | 'getExcessStETH'
      | 'getNonCoverSharesBurnt'
      | 'getRoleAdmin'
      | 'getRoleMember'
      | 'getRoleMemberCount'
      | 'getSharesRequestedToBurn'
      | 'grantRole'
      | 'hasRole'
      | 'recoverERC20'
      | 'recoverERC721'
      | 'recoverExcessStETH'
      | 'renounceRole'
      | 'requestBurnMyStETH'
      | 'requestBurnMyStETHForCover'
      | 'requestBurnShares'
      | 'requestBurnSharesForCover'
      | 'revokeRole'
      | 'supportsInterface'
  ): FunctionFragment

  getEvent(
    nameOrSignatureOrTopic:
      | 'ERC20Recovered'
      | 'ERC721Recovered'
      | 'ExcessStETHRecovered'
      | 'RoleAdminChanged'
      | 'RoleGranted'
      | 'RoleRevoked'
      | 'StETHBurnRequested'
      | 'StETHBurnt'
  ): EventFragment

  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'REQUEST_BURN_MY_STETH_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'REQUEST_BURN_SHARES_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'STETH', values?: undefined): string
  encodeFunctionData(functionFragment: 'TREASURY', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'commitSharesToBurn',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getCoverSharesBurnt',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getExcessStETH',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getNonCoverSharesBurnt',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleMember',
    values: [BytesLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleMemberCount',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getSharesRequestedToBurn',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'recoverERC20',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'recoverERC721',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'recoverExcessStETH',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'requestBurnMyStETH',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'requestBurnMyStETHForCover',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'requestBurnShares',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'requestBurnSharesForCover',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike]
  ): string

  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'REQUEST_BURN_MY_STETH_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'REQUEST_BURN_SHARES_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'STETH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'TREASURY', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'commitSharesToBurn',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCoverSharesBurnt',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getExcessStETH',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getNonCoverSharesBurnt',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRoleMember',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRoleMemberCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSharesRequestedToBurn',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'recoverERC20',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'recoverERC721',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'recoverExcessStETH',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'requestBurnMyStETH',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'requestBurnMyStETHForCover',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'requestBurnShares',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'requestBurnSharesForCover',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result
}

export namespace ERC20RecoveredEvent {
  export type InputTuple = [
    requestedBy: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ]
  export type OutputTuple = [requestedBy: string, token: string, amount: bigint]
  export interface OutputObject {
    requestedBy: string
    token: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ERC721RecoveredEvent {
  export type InputTuple = [
    requestedBy: AddressLike,
    token: AddressLike,
    tokenId: BigNumberish
  ]
  export type OutputTuple = [
    requestedBy: string,
    token: string,
    tokenId: bigint
  ]
  export interface OutputObject {
    requestedBy: string
    token: string
    tokenId: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ExcessStETHRecoveredEvent {
  export type InputTuple = [
    requestedBy: AddressLike,
    amountOfStETH: BigNumberish,
    amountOfShares: BigNumberish
  ]
  export type OutputTuple = [
    requestedBy: string,
    amountOfStETH: bigint,
    amountOfShares: bigint
  ]
  export interface OutputObject {
    requestedBy: string
    amountOfStETH: bigint
    amountOfShares: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ]
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ]
  export interface OutputObject {
    role: string
    previousAdminRole: string
    newAdminRole: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ]
  export type OutputTuple = [role: string, account: string, sender: string]
  export interface OutputObject {
    role: string
    account: string
    sender: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ]
  export type OutputTuple = [role: string, account: string, sender: string]
  export interface OutputObject {
    role: string
    account: string
    sender: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace StETHBurnRequestedEvent {
  export type InputTuple = [
    isCover: boolean,
    requestedBy: AddressLike,
    amountOfStETH: BigNumberish,
    amountOfShares: BigNumberish
  ]
  export type OutputTuple = [
    isCover: boolean,
    requestedBy: string,
    amountOfStETH: bigint,
    amountOfShares: bigint
  ]
  export interface OutputObject {
    isCover: boolean
    requestedBy: string
    amountOfStETH: bigint
    amountOfShares: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace StETHBurntEvent {
  export type InputTuple = [
    isCover: boolean,
    amountOfStETH: BigNumberish,
    amountOfShares: BigNumberish
  ]
  export type OutputTuple = [
    isCover: boolean,
    amountOfStETH: bigint,
    amountOfShares: bigint
  ]
  export interface OutputObject {
    isCover: boolean
    amountOfStETH: bigint
    amountOfShares: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface Burner extends BaseContract {
  connect(runner?: ContractRunner | null): Burner
  waitForDeployment(): Promise<this>

  interface: BurnerInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], 'view'>

  REQUEST_BURN_MY_STETH_ROLE: TypedContractMethod<[], [string], 'view'>

  REQUEST_BURN_SHARES_ROLE: TypedContractMethod<[], [string], 'view'>

  STETH: TypedContractMethod<[], [string], 'view'>

  TREASURY: TypedContractMethod<[], [string], 'view'>

  commitSharesToBurn: TypedContractMethod<
    [_sharesToBurn: BigNumberish],
    [void],
    'nonpayable'
  >

  getCoverSharesBurnt: TypedContractMethod<[], [bigint], 'view'>

  getExcessStETH: TypedContractMethod<[], [bigint], 'view'>

  getNonCoverSharesBurnt: TypedContractMethod<[], [bigint], 'view'>

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], 'view'>

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    'view'
  >

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], 'view'>

  getSharesRequestedToBurn: TypedContractMethod<
    [],
    [[bigint, bigint] & { coverShares: bigint; nonCoverShares: bigint }],
    'view'
  >

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    'view'
  >

  recoverERC20: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    'nonpayable'
  >

  recoverERC721: TypedContractMethod<
    [_token: AddressLike, _tokenId: BigNumberish],
    [void],
    'nonpayable'
  >

  recoverExcessStETH: TypedContractMethod<[], [void], 'nonpayable'>

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >

  requestBurnMyStETH: TypedContractMethod<
    [_stETHAmountToBurn: BigNumberish],
    [void],
    'nonpayable'
  >

  requestBurnMyStETHForCover: TypedContractMethod<
    [_stETHAmountToBurn: BigNumberish],
    [void],
    'nonpayable'
  >

  requestBurnShares: TypedContractMethod<
    [_from: AddressLike, _sharesAmountToBurn: BigNumberish],
    [void],
    'nonpayable'
  >

  requestBurnSharesForCover: TypedContractMethod<
    [_from: AddressLike, _sharesAmountToBurn: BigNumberish],
    [void],
    'nonpayable'
  >

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    'view'
  >

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T

  getFunction(
    nameOrSignature: 'DEFAULT_ADMIN_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'REQUEST_BURN_MY_STETH_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'REQUEST_BURN_SHARES_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'STETH'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'TREASURY'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'commitSharesToBurn'
  ): TypedContractMethod<[_sharesToBurn: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'getCoverSharesBurnt'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'getExcessStETH'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'getNonCoverSharesBurnt'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'getRoleAdmin'
  ): TypedContractMethod<[role: BytesLike], [string], 'view'>
  getFunction(
    nameOrSignature: 'getRoleMember'
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    'view'
  >
  getFunction(
    nameOrSignature: 'getRoleMemberCount'
  ): TypedContractMethod<[role: BytesLike], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'getSharesRequestedToBurn'
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { coverShares: bigint; nonCoverShares: bigint }],
    'view'
  >
  getFunction(
    nameOrSignature: 'grantRole'
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'hasRole'
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'recoverERC20'
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'recoverERC721'
  ): TypedContractMethod<
    [_token: AddressLike, _tokenId: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'recoverExcessStETH'
  ): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'renounceRole'
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'requestBurnMyStETH'
  ): TypedContractMethod<
    [_stETHAmountToBurn: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'requestBurnMyStETHForCover'
  ): TypedContractMethod<
    [_stETHAmountToBurn: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'requestBurnShares'
  ): TypedContractMethod<
    [_from: AddressLike, _sharesAmountToBurn: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'requestBurnSharesForCover'
  ): TypedContractMethod<
    [_from: AddressLike, _sharesAmountToBurn: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'revokeRole'
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'supportsInterface'
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>

  getEvent(
    key: 'ERC20Recovered'
  ): TypedContractEvent<
    ERC20RecoveredEvent.InputTuple,
    ERC20RecoveredEvent.OutputTuple,
    ERC20RecoveredEvent.OutputObject
  >
  getEvent(
    key: 'ERC721Recovered'
  ): TypedContractEvent<
    ERC721RecoveredEvent.InputTuple,
    ERC721RecoveredEvent.OutputTuple,
    ERC721RecoveredEvent.OutputObject
  >
  getEvent(
    key: 'ExcessStETHRecovered'
  ): TypedContractEvent<
    ExcessStETHRecoveredEvent.InputTuple,
    ExcessStETHRecoveredEvent.OutputTuple,
    ExcessStETHRecoveredEvent.OutputObject
  >
  getEvent(
    key: 'RoleAdminChanged'
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >
  getEvent(
    key: 'RoleGranted'
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >
  getEvent(
    key: 'RoleRevoked'
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >
  getEvent(
    key: 'StETHBurnRequested'
  ): TypedContractEvent<
    StETHBurnRequestedEvent.InputTuple,
    StETHBurnRequestedEvent.OutputTuple,
    StETHBurnRequestedEvent.OutputObject
  >
  getEvent(
    key: 'StETHBurnt'
  ): TypedContractEvent<
    StETHBurntEvent.InputTuple,
    StETHBurntEvent.OutputTuple,
    StETHBurntEvent.OutputObject
  >

  filters: {
    'ERC20Recovered(address,address,uint256)': TypedContractEvent<
      ERC20RecoveredEvent.InputTuple,
      ERC20RecoveredEvent.OutputTuple,
      ERC20RecoveredEvent.OutputObject
    >
    ERC20Recovered: TypedContractEvent<
      ERC20RecoveredEvent.InputTuple,
      ERC20RecoveredEvent.OutputTuple,
      ERC20RecoveredEvent.OutputObject
    >

    'ERC721Recovered(address,address,uint256)': TypedContractEvent<
      ERC721RecoveredEvent.InputTuple,
      ERC721RecoveredEvent.OutputTuple,
      ERC721RecoveredEvent.OutputObject
    >
    ERC721Recovered: TypedContractEvent<
      ERC721RecoveredEvent.InputTuple,
      ERC721RecoveredEvent.OutputTuple,
      ERC721RecoveredEvent.OutputObject
    >

    'ExcessStETHRecovered(address,uint256,uint256)': TypedContractEvent<
      ExcessStETHRecoveredEvent.InputTuple,
      ExcessStETHRecoveredEvent.OutputTuple,
      ExcessStETHRecoveredEvent.OutputObject
    >
    ExcessStETHRecovered: TypedContractEvent<
      ExcessStETHRecoveredEvent.InputTuple,
      ExcessStETHRecoveredEvent.OutputTuple,
      ExcessStETHRecoveredEvent.OutputObject
    >

    'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >

    'RoleGranted(bytes32,address,address)': TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >

    'RoleRevoked(bytes32,address,address)': TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >

    'StETHBurnRequested(bool,address,uint256,uint256)': TypedContractEvent<
      StETHBurnRequestedEvent.InputTuple,
      StETHBurnRequestedEvent.OutputTuple,
      StETHBurnRequestedEvent.OutputObject
    >
    StETHBurnRequested: TypedContractEvent<
      StETHBurnRequestedEvent.InputTuple,
      StETHBurnRequestedEvent.OutputTuple,
      StETHBurnRequestedEvent.OutputObject
    >

    'StETHBurnt(bool,uint256,uint256)': TypedContractEvent<
      StETHBurntEvent.InputTuple,
      StETHBurntEvent.OutputTuple,
      StETHBurntEvent.OutputObject
    >
    StETHBurnt: TypedContractEvent<
      StETHBurntEvent.InputTuple,
      StETHBurntEvent.OutputTuple,
      StETHBurntEvent.OutputObject
    >
  }
}
