/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common'

export interface ACLInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'hasInitialized'
      | 'createBurnedPermission'
      | 'burnPermissionManager'
      | 'grantPermission'
      | 'getPermissionParamsLength'
      | 'evalParams'
      | 'NO_PERMISSION'
      | 'getEVMScriptExecutor'
      | 'getRecoveryVault'
      | 'CREATE_PERMISSIONS_ROLE'
      | 'grantPermissionP'
      | 'hasPermission(address,address,bytes32)'
      | 'hasPermission(address,address,bytes32,uint256[])'
      | 'hasPermission(address,address,bytes32,bytes)'
      | 'allowRecoverability'
      | 'appId'
      | 'getInitializationBlock'
      | 'revokePermission'
      | 'transferToVault'
      | 'getPermissionParam'
      | 'canPerform'
      | 'getEVMScriptRegistry'
      | 'ANY_ENTITY'
      | 'removePermissionManager'
      | 'setPermissionManager'
      | 'getPermissionManager'
      | 'createPermission'
      | 'initialize'
      | 'EMPTY_PARAM_HASH'
      | 'kernel'
      | 'isPetrified'
      | 'BURN_ENTITY'
  ): FunctionFragment

  getEvent(
    nameOrSignatureOrTopic:
      | 'SetPermission'
      | 'SetPermissionParams'
      | 'ChangePermissionManager'
      | 'ScriptResult'
  ): EventFragment

  encodeFunctionData(
    functionFragment: 'hasInitialized',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'createBurnedPermission',
    values: [AddressLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'burnPermissionManager',
    values: [AddressLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'grantPermission',
    values: [AddressLike, AddressLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getPermissionParamsLength',
    values: [AddressLike, AddressLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'evalParams',
    values: [BytesLike, AddressLike, AddressLike, BytesLike, BigNumberish[]]
  ): string
  encodeFunctionData(
    functionFragment: 'NO_PERMISSION',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getEVMScriptExecutor',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getRecoveryVault',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'CREATE_PERMISSIONS_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'grantPermissionP',
    values: [AddressLike, AddressLike, BytesLike, BigNumberish[]]
  ): string
  encodeFunctionData(
    functionFragment: 'hasPermission(address,address,bytes32)',
    values: [AddressLike, AddressLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'hasPermission(address,address,bytes32,uint256[])',
    values: [AddressLike, AddressLike, BytesLike, BigNumberish[]]
  ): string
  encodeFunctionData(
    functionFragment: 'hasPermission(address,address,bytes32,bytes)',
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'allowRecoverability',
    values: [AddressLike]
  ): string
  encodeFunctionData(functionFragment: 'appId', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getInitializationBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'revokePermission',
    values: [AddressLike, AddressLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'transferToVault',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getPermissionParam',
    values: [AddressLike, AddressLike, BytesLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'canPerform',
    values: [AddressLike, BytesLike, BigNumberish[]]
  ): string
  encodeFunctionData(
    functionFragment: 'getEVMScriptRegistry',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'ANY_ENTITY', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'removePermissionManager',
    values: [AddressLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'setPermissionManager',
    values: [AddressLike, AddressLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getPermissionManager',
    values: [AddressLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'createPermission',
    values: [AddressLike, AddressLike, BytesLike, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'EMPTY_PARAM_HASH',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'kernel', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'isPetrified',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'BURN_ENTITY',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'hasInitialized',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'createBurnedPermission',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'burnPermissionManager',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'grantPermission',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getPermissionParamsLength',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'evalParams', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'NO_PERMISSION',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getEVMScriptExecutor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRecoveryVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'CREATE_PERMISSIONS_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'grantPermissionP',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'hasPermission(address,address,bytes32)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'hasPermission(address,address,bytes32,uint256[])',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'hasPermission(address,address,bytes32,bytes)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'allowRecoverability',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'appId', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getInitializationBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'revokePermission',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferToVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getPermissionParam',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'canPerform', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getEVMScriptRegistry',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'ANY_ENTITY', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removePermissionManager',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setPermissionManager',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getPermissionManager',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'createPermission',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'EMPTY_PARAM_HASH',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'kernel', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isPetrified', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'BURN_ENTITY', data: BytesLike): Result
}

export namespace SetPermissionEvent {
  export type InputTuple = [
    entity: AddressLike,
    app: AddressLike,
    role: BytesLike,
    allowed: boolean
  ]
  export type OutputTuple = [
    entity: string,
    app: string,
    role: string,
    allowed: boolean
  ]
  export interface OutputObject {
    entity: string
    app: string
    role: string
    allowed: boolean
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SetPermissionParamsEvent {
  export type InputTuple = [
    entity: AddressLike,
    app: AddressLike,
    role: BytesLike,
    paramsHash: BytesLike
  ]
  export type OutputTuple = [
    entity: string,
    app: string,
    role: string,
    paramsHash: string
  ]
  export interface OutputObject {
    entity: string
    app: string
    role: string
    paramsHash: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ChangePermissionManagerEvent {
  export type InputTuple = [
    app: AddressLike,
    role: BytesLike,
    manager: AddressLike
  ]
  export type OutputTuple = [app: string, role: string, manager: string]
  export interface OutputObject {
    app: string
    role: string
    manager: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ScriptResultEvent {
  export type InputTuple = [
    executor: AddressLike,
    script: BytesLike,
    input: BytesLike,
    returnData: BytesLike
  ]
  export type OutputTuple = [
    executor: string,
    script: string,
    input: string,
    returnData: string
  ]
  export interface OutputObject {
    executor: string
    script: string
    input: string
    returnData: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface ACL extends BaseContract {
  connect(runner?: ContractRunner | null): ACL
  waitForDeployment(): Promise<this>

  interface: ACLInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>

  hasInitialized: TypedContractMethod<[], [boolean], 'view'>

  createBurnedPermission: TypedContractMethod<
    [_app: AddressLike, _role: BytesLike],
    [void],
    'nonpayable'
  >

  burnPermissionManager: TypedContractMethod<
    [_app: AddressLike, _role: BytesLike],
    [void],
    'nonpayable'
  >

  grantPermission: TypedContractMethod<
    [_entity: AddressLike, _app: AddressLike, _role: BytesLike],
    [void],
    'nonpayable'
  >

  getPermissionParamsLength: TypedContractMethod<
    [_entity: AddressLike, _app: AddressLike, _role: BytesLike],
    [bigint],
    'view'
  >

  evalParams: TypedContractMethod<
    [
      _paramsHash: BytesLike,
      _who: AddressLike,
      _where: AddressLike,
      _what: BytesLike,
      _how: BigNumberish[]
    ],
    [boolean],
    'view'
  >

  NO_PERMISSION: TypedContractMethod<[], [string], 'view'>

  getEVMScriptExecutor: TypedContractMethod<
    [_script: BytesLike],
    [string],
    'view'
  >

  getRecoveryVault: TypedContractMethod<[], [string], 'view'>

  CREATE_PERMISSIONS_ROLE: TypedContractMethod<[], [string], 'view'>

  grantPermissionP: TypedContractMethod<
    [
      _entity: AddressLike,
      _app: AddressLike,
      _role: BytesLike,
      _params: BigNumberish[]
    ],
    [void],
    'nonpayable'
  >

  'hasPermission(address,address,bytes32)': TypedContractMethod<
    [_who: AddressLike, _where: AddressLike, _what: BytesLike],
    [boolean],
    'view'
  >

  'hasPermission(address,address,bytes32,uint256[])': TypedContractMethod<
    [
      _who: AddressLike,
      _where: AddressLike,
      _what: BytesLike,
      _how: BigNumberish[]
    ],
    [boolean],
    'view'
  >

  'hasPermission(address,address,bytes32,bytes)': TypedContractMethod<
    [_who: AddressLike, _where: AddressLike, _what: BytesLike, _how: BytesLike],
    [boolean],
    'view'
  >

  allowRecoverability: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    'view'
  >

  appId: TypedContractMethod<[], [string], 'view'>

  getInitializationBlock: TypedContractMethod<[], [bigint], 'view'>

  revokePermission: TypedContractMethod<
    [_entity: AddressLike, _app: AddressLike, _role: BytesLike],
    [void],
    'nonpayable'
  >

  transferToVault: TypedContractMethod<
    [_token: AddressLike],
    [void],
    'nonpayable'
  >

  getPermissionParam: TypedContractMethod<
    [
      _entity: AddressLike,
      _app: AddressLike,
      _role: BytesLike,
      _index: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    'view'
  >

  canPerform: TypedContractMethod<
    [_sender: AddressLike, _role: BytesLike, _params: BigNumberish[]],
    [boolean],
    'view'
  >

  getEVMScriptRegistry: TypedContractMethod<[], [string], 'view'>

  ANY_ENTITY: TypedContractMethod<[], [string], 'view'>

  removePermissionManager: TypedContractMethod<
    [_app: AddressLike, _role: BytesLike],
    [void],
    'nonpayable'
  >

  setPermissionManager: TypedContractMethod<
    [_newManager: AddressLike, _app: AddressLike, _role: BytesLike],
    [void],
    'nonpayable'
  >

  getPermissionManager: TypedContractMethod<
    [_app: AddressLike, _role: BytesLike],
    [string],
    'view'
  >

  createPermission: TypedContractMethod<
    [
      _entity: AddressLike,
      _app: AddressLike,
      _role: BytesLike,
      _manager: AddressLike
    ],
    [void],
    'nonpayable'
  >

  initialize: TypedContractMethod<
    [_permissionsCreator: AddressLike],
    [void],
    'nonpayable'
  >

  EMPTY_PARAM_HASH: TypedContractMethod<[], [string], 'view'>

  kernel: TypedContractMethod<[], [string], 'view'>

  isPetrified: TypedContractMethod<[], [boolean], 'view'>

  BURN_ENTITY: TypedContractMethod<[], [string], 'view'>

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T

  getFunction(
    nameOrSignature: 'hasInitialized'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'createBurnedPermission'
  ): TypedContractMethod<
    [_app: AddressLike, _role: BytesLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'burnPermissionManager'
  ): TypedContractMethod<
    [_app: AddressLike, _role: BytesLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'grantPermission'
  ): TypedContractMethod<
    [_entity: AddressLike, _app: AddressLike, _role: BytesLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'getPermissionParamsLength'
  ): TypedContractMethod<
    [_entity: AddressLike, _app: AddressLike, _role: BytesLike],
    [bigint],
    'view'
  >
  getFunction(
    nameOrSignature: 'evalParams'
  ): TypedContractMethod<
    [
      _paramsHash: BytesLike,
      _who: AddressLike,
      _where: AddressLike,
      _what: BytesLike,
      _how: BigNumberish[]
    ],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'NO_PERMISSION'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'getEVMScriptExecutor'
  ): TypedContractMethod<[_script: BytesLike], [string], 'view'>
  getFunction(
    nameOrSignature: 'getRecoveryVault'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'CREATE_PERMISSIONS_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'grantPermissionP'
  ): TypedContractMethod<
    [
      _entity: AddressLike,
      _app: AddressLike,
      _role: BytesLike,
      _params: BigNumberish[]
    ],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'hasPermission(address,address,bytes32)'
  ): TypedContractMethod<
    [_who: AddressLike, _where: AddressLike, _what: BytesLike],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'hasPermission(address,address,bytes32,uint256[])'
  ): TypedContractMethod<
    [
      _who: AddressLike,
      _where: AddressLike,
      _what: BytesLike,
      _how: BigNumberish[]
    ],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'hasPermission(address,address,bytes32,bytes)'
  ): TypedContractMethod<
    [_who: AddressLike, _where: AddressLike, _what: BytesLike, _how: BytesLike],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'allowRecoverability'
  ): TypedContractMethod<[token: AddressLike], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'appId'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'getInitializationBlock'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'revokePermission'
  ): TypedContractMethod<
    [_entity: AddressLike, _app: AddressLike, _role: BytesLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'transferToVault'
  ): TypedContractMethod<[_token: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'getPermissionParam'
  ): TypedContractMethod<
    [
      _entity: AddressLike,
      _app: AddressLike,
      _role: BytesLike,
      _index: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    'view'
  >
  getFunction(
    nameOrSignature: 'canPerform'
  ): TypedContractMethod<
    [_sender: AddressLike, _role: BytesLike, _params: BigNumberish[]],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'getEVMScriptRegistry'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'ANY_ENTITY'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'removePermissionManager'
  ): TypedContractMethod<
    [_app: AddressLike, _role: BytesLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'setPermissionManager'
  ): TypedContractMethod<
    [_newManager: AddressLike, _app: AddressLike, _role: BytesLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'getPermissionManager'
  ): TypedContractMethod<
    [_app: AddressLike, _role: BytesLike],
    [string],
    'view'
  >
  getFunction(
    nameOrSignature: 'createPermission'
  ): TypedContractMethod<
    [
      _entity: AddressLike,
      _app: AddressLike,
      _role: BytesLike,
      _manager: AddressLike
    ],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<
    [_permissionsCreator: AddressLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'EMPTY_PARAM_HASH'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'kernel'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'isPetrified'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'BURN_ENTITY'
  ): TypedContractMethod<[], [string], 'view'>

  getEvent(
    key: 'SetPermission'
  ): TypedContractEvent<
    SetPermissionEvent.InputTuple,
    SetPermissionEvent.OutputTuple,
    SetPermissionEvent.OutputObject
  >
  getEvent(
    key: 'SetPermissionParams'
  ): TypedContractEvent<
    SetPermissionParamsEvent.InputTuple,
    SetPermissionParamsEvent.OutputTuple,
    SetPermissionParamsEvent.OutputObject
  >
  getEvent(
    key: 'ChangePermissionManager'
  ): TypedContractEvent<
    ChangePermissionManagerEvent.InputTuple,
    ChangePermissionManagerEvent.OutputTuple,
    ChangePermissionManagerEvent.OutputObject
  >
  getEvent(
    key: 'ScriptResult'
  ): TypedContractEvent<
    ScriptResultEvent.InputTuple,
    ScriptResultEvent.OutputTuple,
    ScriptResultEvent.OutputObject
  >

  filters: {
    'SetPermission(address,address,bytes32,bool)': TypedContractEvent<
      SetPermissionEvent.InputTuple,
      SetPermissionEvent.OutputTuple,
      SetPermissionEvent.OutputObject
    >
    SetPermission: TypedContractEvent<
      SetPermissionEvent.InputTuple,
      SetPermissionEvent.OutputTuple,
      SetPermissionEvent.OutputObject
    >

    'SetPermissionParams(address,address,bytes32,bytes32)': TypedContractEvent<
      SetPermissionParamsEvent.InputTuple,
      SetPermissionParamsEvent.OutputTuple,
      SetPermissionParamsEvent.OutputObject
    >
    SetPermissionParams: TypedContractEvent<
      SetPermissionParamsEvent.InputTuple,
      SetPermissionParamsEvent.OutputTuple,
      SetPermissionParamsEvent.OutputObject
    >

    'ChangePermissionManager(address,bytes32,address)': TypedContractEvent<
      ChangePermissionManagerEvent.InputTuple,
      ChangePermissionManagerEvent.OutputTuple,
      ChangePermissionManagerEvent.OutputObject
    >
    ChangePermissionManager: TypedContractEvent<
      ChangePermissionManagerEvent.InputTuple,
      ChangePermissionManagerEvent.OutputTuple,
      ChangePermissionManagerEvent.OutputObject
    >

    'ScriptResult(address,bytes,bytes,bytes)': TypedContractEvent<
      ScriptResultEvent.InputTuple,
      ScriptResultEvent.OutputTuple,
      ScriptResultEvent.OutputObject
    >
    ScriptResult: TypedContractEvent<
      ScriptResultEvent.InputTuple,
      ScriptResultEvent.OutputTuple,
      ScriptResultEvent.OutputObject
    >
  }
}
