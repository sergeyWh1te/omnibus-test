/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common'

export interface NodeOperatorsRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'hasInitialized'
      | 'addSigningKeys'
      | 'getType'
      | 'getEVMScriptExecutor'
      | 'clearNodeOperatorPenalty'
      | 'getRecoveryVault'
      | 'getNodeOperatorIds'
      | 'getSigningKeys'
      | 'removeSigningKeysOperatorBH'
      | 'getNodeOperatorIsActive'
      | 'setNodeOperatorName'
      | 'getRewardsDistribution'
      | 'invalidateReadyToDepositKeysRange'
      | 'initialize'
      | 'setStuckPenaltyDelay'
      | 'getStuckPenaltyDelay'
      | 'removeSigningKey'
      | 'removeSigningKeys'
      | 'isOperatorPenalized'
      | 'deactivateNodeOperator'
      | 'allowRecoverability'
      | 'STAKING_ROUTER_ROLE'
      | 'addSigningKeysOperatorBH'
      | 'appId'
      | 'getActiveNodeOperatorsCount'
      | 'addNodeOperator'
      | 'getContractVersion'
      | 'getInitializationBlock'
      | 'getUnusedSigningKeyCount'
      | 'onRewardsMinted'
      | 'MANAGE_NODE_OPERATOR_ROLE'
      | 'onWithdrawalCredentialsChanged'
      | 'activateNodeOperator'
      | 'setNodeOperatorRewardAddress'
      | 'getNodeOperator'
      | 'finalizeUpgrade_v2'
      | 'getStakingModuleSummary'
      | 'updateExitedValidatorsCount'
      | 'updateStuckValidatorsCount'
      | 'transferToVault'
      | 'canPerform'
      | 'updateRefundedValidatorsCount'
      | 'getEVMScriptRegistry'
      | 'getNodeOperatorsCount'
      | 'updateTargetValidatorsLimits'
      | 'setNodeOperatorStakingLimit'
      | 'getNodeOperatorSummary'
      | 'getSigningKey'
      | 'MAX_NODE_OPERATOR_NAME_LENGTH'
      | 'obtainDepositData'
      | 'getKeysOpIndex'
      | 'getNonce'
      | 'kernel'
      | 'getLocator'
      | 'SET_NODE_OPERATOR_LIMIT_ROLE'
      | 'getTotalSigningKeyCount'
      | 'isPetrified'
      | 'MAX_STUCK_PENALTY_DELAY'
      | 'onExitedAndStuckValidatorsCountsUpdated'
      | 'MAX_NODE_OPERATORS_COUNT'
      | 'removeSigningKeyOperatorBH'
      | 'unsafeUpdateValidatorsCount'
      | 'MANAGE_SIGNING_KEYS'
      | 'isOperatorPenaltyCleared'
  ): FunctionFragment

  getEvent(
    nameOrSignatureOrTopic:
      | 'NodeOperatorAdded'
      | 'NodeOperatorActiveSet'
      | 'NodeOperatorNameSet'
      | 'NodeOperatorRewardAddressSet'
      | 'NodeOperatorTotalKeysTrimmed'
      | 'KeysOpIndexSet'
      | 'StakingModuleTypeSet'
      | 'RewardsDistributed'
      | 'LocatorContractSet'
      | 'VettedSigningKeysCountChanged'
      | 'DepositedSigningKeysCountChanged'
      | 'ExitedSigningKeysCountChanged'
      | 'TotalSigningKeysCountChanged'
      | 'NonceChanged'
      | 'StuckPenaltyDelayChanged'
      | 'StuckPenaltyStateChanged'
      | 'TargetValidatorsCountChanged'
      | 'NodeOperatorPenalized'
      | 'ContractVersionSet'
      | 'ScriptResult'
      | 'RecoverToVault'
  ): EventFragment

  encodeFunctionData(
    functionFragment: 'hasInitialized',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'addSigningKeys',
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'getType', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getEVMScriptExecutor',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'clearNodeOperatorPenalty',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getRecoveryVault',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getNodeOperatorIds',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getSigningKeys',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'removeSigningKeysOperatorBH',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getNodeOperatorIsActive',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setNodeOperatorName',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'getRewardsDistribution',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'invalidateReadyToDepositKeysRange',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [AddressLike, BytesLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setStuckPenaltyDelay',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getStuckPenaltyDelay',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'removeSigningKey',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'removeSigningKeys',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'isOperatorPenalized',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'deactivateNodeOperator',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'allowRecoverability',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'STAKING_ROUTER_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'addSigningKeysOperatorBH',
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'appId', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getActiveNodeOperatorsCount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'addNodeOperator',
    values: [string, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getContractVersion',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getInitializationBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getUnusedSigningKeyCount',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'onRewardsMinted',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'MANAGE_NODE_OPERATOR_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'onWithdrawalCredentialsChanged',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'activateNodeOperator',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setNodeOperatorRewardAddress',
    values: [BigNumberish, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getNodeOperator',
    values: [BigNumberish, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'finalizeUpgrade_v2',
    values: [AddressLike, BytesLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getStakingModuleSummary',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'updateExitedValidatorsCount',
    values: [BytesLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'updateStuckValidatorsCount',
    values: [BytesLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'transferToVault',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'canPerform',
    values: [AddressLike, BytesLike, BigNumberish[]]
  ): string
  encodeFunctionData(
    functionFragment: 'updateRefundedValidatorsCount',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getEVMScriptRegistry',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getNodeOperatorsCount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'updateTargetValidatorsLimits',
    values: [BigNumberish, boolean, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setNodeOperatorStakingLimit',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getNodeOperatorSummary',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getSigningKey',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'MAX_NODE_OPERATOR_NAME_LENGTH',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'obtainDepositData',
    values: [BigNumberish, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getKeysOpIndex',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'getNonce', values?: undefined): string
  encodeFunctionData(functionFragment: 'kernel', values?: undefined): string
  encodeFunctionData(functionFragment: 'getLocator', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'SET_NODE_OPERATOR_LIMIT_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getTotalSigningKeyCount',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'isPetrified',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'MAX_STUCK_PENALTY_DELAY',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'onExitedAndStuckValidatorsCountsUpdated',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'MAX_NODE_OPERATORS_COUNT',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'removeSigningKeyOperatorBH',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'unsafeUpdateValidatorsCount',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'MANAGE_SIGNING_KEYS',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'isOperatorPenaltyCleared',
    values: [BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'hasInitialized',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'addSigningKeys',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getType', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getEVMScriptExecutor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'clearNodeOperatorPenalty',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRecoveryVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getNodeOperatorIds',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSigningKeys',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'removeSigningKeysOperatorBH',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getNodeOperatorIsActive',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setNodeOperatorName',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRewardsDistribution',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'invalidateReadyToDepositKeysRange',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setStuckPenaltyDelay',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStuckPenaltyDelay',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'removeSigningKey',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'removeSigningKeys',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'isOperatorPenalized',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'deactivateNodeOperator',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'allowRecoverability',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'STAKING_ROUTER_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'addSigningKeysOperatorBH',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'appId', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getActiveNodeOperatorsCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'addNodeOperator',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getContractVersion',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getInitializationBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getUnusedSigningKeyCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'onRewardsMinted',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'MANAGE_NODE_OPERATOR_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'onWithdrawalCredentialsChanged',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'activateNodeOperator',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setNodeOperatorRewardAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getNodeOperator',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'finalizeUpgrade_v2',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStakingModuleSummary',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateExitedValidatorsCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateStuckValidatorsCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferToVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'canPerform', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'updateRefundedValidatorsCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getEVMScriptRegistry',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getNodeOperatorsCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateTargetValidatorsLimits',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setNodeOperatorStakingLimit',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getNodeOperatorSummary',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSigningKey',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'MAX_NODE_OPERATOR_NAME_LENGTH',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'obtainDepositData',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getKeysOpIndex',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getNonce', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'kernel', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getLocator', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'SET_NODE_OPERATOR_LIMIT_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTotalSigningKeyCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'isPetrified', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'MAX_STUCK_PENALTY_DELAY',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'onExitedAndStuckValidatorsCountsUpdated',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'MAX_NODE_OPERATORS_COUNT',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'removeSigningKeyOperatorBH',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'unsafeUpdateValidatorsCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'MANAGE_SIGNING_KEYS',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'isOperatorPenaltyCleared',
    data: BytesLike
  ): Result
}

export namespace NodeOperatorAddedEvent {
  export type InputTuple = [
    nodeOperatorId: BigNumberish,
    name: string,
    rewardAddress: AddressLike,
    stakingLimit: BigNumberish
  ]
  export type OutputTuple = [
    nodeOperatorId: bigint,
    name: string,
    rewardAddress: string,
    stakingLimit: bigint
  ]
  export interface OutputObject {
    nodeOperatorId: bigint
    name: string
    rewardAddress: string
    stakingLimit: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace NodeOperatorActiveSetEvent {
  export type InputTuple = [nodeOperatorId: BigNumberish, active: boolean]
  export type OutputTuple = [nodeOperatorId: bigint, active: boolean]
  export interface OutputObject {
    nodeOperatorId: bigint
    active: boolean
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace NodeOperatorNameSetEvent {
  export type InputTuple = [nodeOperatorId: BigNumberish, name: string]
  export type OutputTuple = [nodeOperatorId: bigint, name: string]
  export interface OutputObject {
    nodeOperatorId: bigint
    name: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace NodeOperatorRewardAddressSetEvent {
  export type InputTuple = [
    nodeOperatorId: BigNumberish,
    rewardAddress: AddressLike
  ]
  export type OutputTuple = [nodeOperatorId: bigint, rewardAddress: string]
  export interface OutputObject {
    nodeOperatorId: bigint
    rewardAddress: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace NodeOperatorTotalKeysTrimmedEvent {
  export type InputTuple = [
    nodeOperatorId: BigNumberish,
    totalKeysTrimmed: BigNumberish
  ]
  export type OutputTuple = [nodeOperatorId: bigint, totalKeysTrimmed: bigint]
  export interface OutputObject {
    nodeOperatorId: bigint
    totalKeysTrimmed: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace KeysOpIndexSetEvent {
  export type InputTuple = [keysOpIndex: BigNumberish]
  export type OutputTuple = [keysOpIndex: bigint]
  export interface OutputObject {
    keysOpIndex: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace StakingModuleTypeSetEvent {
  export type InputTuple = [moduleType: BytesLike]
  export type OutputTuple = [moduleType: string]
  export interface OutputObject {
    moduleType: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RewardsDistributedEvent {
  export type InputTuple = [
    rewardAddress: AddressLike,
    sharesAmount: BigNumberish
  ]
  export type OutputTuple = [rewardAddress: string, sharesAmount: bigint]
  export interface OutputObject {
    rewardAddress: string
    sharesAmount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace LocatorContractSetEvent {
  export type InputTuple = [locatorAddress: AddressLike]
  export type OutputTuple = [locatorAddress: string]
  export interface OutputObject {
    locatorAddress: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace VettedSigningKeysCountChangedEvent {
  export type InputTuple = [
    nodeOperatorId: BigNumberish,
    approvedValidatorsCount: BigNumberish
  ]
  export type OutputTuple = [
    nodeOperatorId: bigint,
    approvedValidatorsCount: bigint
  ]
  export interface OutputObject {
    nodeOperatorId: bigint
    approvedValidatorsCount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace DepositedSigningKeysCountChangedEvent {
  export type InputTuple = [
    nodeOperatorId: BigNumberish,
    depositedValidatorsCount: BigNumberish
  ]
  export type OutputTuple = [
    nodeOperatorId: bigint,
    depositedValidatorsCount: bigint
  ]
  export interface OutputObject {
    nodeOperatorId: bigint
    depositedValidatorsCount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ExitedSigningKeysCountChangedEvent {
  export type InputTuple = [
    nodeOperatorId: BigNumberish,
    exitedValidatorsCount: BigNumberish
  ]
  export type OutputTuple = [
    nodeOperatorId: bigint,
    exitedValidatorsCount: bigint
  ]
  export interface OutputObject {
    nodeOperatorId: bigint
    exitedValidatorsCount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace TotalSigningKeysCountChangedEvent {
  export type InputTuple = [
    nodeOperatorId: BigNumberish,
    totalValidatorsCount: BigNumberish
  ]
  export type OutputTuple = [
    nodeOperatorId: bigint,
    totalValidatorsCount: bigint
  ]
  export interface OutputObject {
    nodeOperatorId: bigint
    totalValidatorsCount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace NonceChangedEvent {
  export type InputTuple = [nonce: BigNumberish]
  export type OutputTuple = [nonce: bigint]
  export interface OutputObject {
    nonce: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace StuckPenaltyDelayChangedEvent {
  export type InputTuple = [stuckPenaltyDelay: BigNumberish]
  export type OutputTuple = [stuckPenaltyDelay: bigint]
  export interface OutputObject {
    stuckPenaltyDelay: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace StuckPenaltyStateChangedEvent {
  export type InputTuple = [
    nodeOperatorId: BigNumberish,
    stuckValidatorsCount: BigNumberish,
    refundedValidatorsCount: BigNumberish,
    stuckPenaltyEndTimestamp: BigNumberish
  ]
  export type OutputTuple = [
    nodeOperatorId: bigint,
    stuckValidatorsCount: bigint,
    refundedValidatorsCount: bigint,
    stuckPenaltyEndTimestamp: bigint
  ]
  export interface OutputObject {
    nodeOperatorId: bigint
    stuckValidatorsCount: bigint
    refundedValidatorsCount: bigint
    stuckPenaltyEndTimestamp: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace TargetValidatorsCountChangedEvent {
  export type InputTuple = [
    nodeOperatorId: BigNumberish,
    targetValidatorsCount: BigNumberish
  ]
  export type OutputTuple = [
    nodeOperatorId: bigint,
    targetValidatorsCount: bigint
  ]
  export interface OutputObject {
    nodeOperatorId: bigint
    targetValidatorsCount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace NodeOperatorPenalizedEvent {
  export type InputTuple = [
    recipientAddress: AddressLike,
    sharesPenalizedAmount: BigNumberish
  ]
  export type OutputTuple = [
    recipientAddress: string,
    sharesPenalizedAmount: bigint
  ]
  export interface OutputObject {
    recipientAddress: string
    sharesPenalizedAmount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ContractVersionSetEvent {
  export type InputTuple = [version: BigNumberish]
  export type OutputTuple = [version: bigint]
  export interface OutputObject {
    version: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ScriptResultEvent {
  export type InputTuple = [
    executor: AddressLike,
    script: BytesLike,
    input: BytesLike,
    returnData: BytesLike
  ]
  export type OutputTuple = [
    executor: string,
    script: string,
    input: string,
    returnData: string
  ]
  export interface OutputObject {
    executor: string
    script: string
    input: string
    returnData: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RecoverToVaultEvent {
  export type InputTuple = [
    vault: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ]
  export type OutputTuple = [vault: string, token: string, amount: bigint]
  export interface OutputObject {
    vault: string
    token: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface NodeOperatorsRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): NodeOperatorsRegistry
  waitForDeployment(): Promise<this>

  interface: NodeOperatorsRegistryInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>

  hasInitialized: TypedContractMethod<[], [boolean], 'view'>

  addSigningKeys: TypedContractMethod<
    [
      _nodeOperatorId: BigNumberish,
      _keysCount: BigNumberish,
      _publicKeys: BytesLike,
      _signatures: BytesLike
    ],
    [void],
    'nonpayable'
  >

  getType: TypedContractMethod<[], [string], 'view'>

  getEVMScriptExecutor: TypedContractMethod<
    [_script: BytesLike],
    [string],
    'view'
  >

  clearNodeOperatorPenalty: TypedContractMethod<
    [_nodeOperatorId: BigNumberish],
    [boolean],
    'nonpayable'
  >

  getRecoveryVault: TypedContractMethod<[], [string], 'view'>

  getNodeOperatorIds: TypedContractMethod<
    [_offset: BigNumberish, _limit: BigNumberish],
    [bigint[]],
    'view'
  >

  getSigningKeys: TypedContractMethod<
    [
      _nodeOperatorId: BigNumberish,
      _offset: BigNumberish,
      _limit: BigNumberish
    ],
    [
      [string, string, boolean[]] & {
        pubkeys: string
        signatures: string
        used: boolean[]
      }
    ],
    'view'
  >

  removeSigningKeysOperatorBH: TypedContractMethod<
    [
      _nodeOperatorId: BigNumberish,
      _fromIndex: BigNumberish,
      _keysCount: BigNumberish
    ],
    [void],
    'nonpayable'
  >

  getNodeOperatorIsActive: TypedContractMethod<
    [_nodeOperatorId: BigNumberish],
    [boolean],
    'view'
  >

  setNodeOperatorName: TypedContractMethod<
    [_nodeOperatorId: BigNumberish, _name: string],
    [void],
    'nonpayable'
  >

  getRewardsDistribution: TypedContractMethod<
    [_totalRewardShares: BigNumberish],
    [
      [string[], bigint[], boolean[]] & {
        recipients: string[]
        shares: bigint[]
        penalized: boolean[]
      }
    ],
    'view'
  >

  invalidateReadyToDepositKeysRange: TypedContractMethod<
    [_indexFrom: BigNumberish, _indexTo: BigNumberish],
    [void],
    'nonpayable'
  >

  initialize: TypedContractMethod<
    [_locator: AddressLike, _type: BytesLike, _stuckPenaltyDelay: BigNumberish],
    [void],
    'nonpayable'
  >

  setStuckPenaltyDelay: TypedContractMethod<
    [_delay: BigNumberish],
    [void],
    'nonpayable'
  >

  getStuckPenaltyDelay: TypedContractMethod<[], [bigint], 'view'>

  removeSigningKey: TypedContractMethod<
    [_nodeOperatorId: BigNumberish, _index: BigNumberish],
    [void],
    'nonpayable'
  >

  removeSigningKeys: TypedContractMethod<
    [
      _nodeOperatorId: BigNumberish,
      _fromIndex: BigNumberish,
      _keysCount: BigNumberish
    ],
    [void],
    'nonpayable'
  >

  isOperatorPenalized: TypedContractMethod<
    [_nodeOperatorId: BigNumberish],
    [boolean],
    'view'
  >

  deactivateNodeOperator: TypedContractMethod<
    [_nodeOperatorId: BigNumberish],
    [void],
    'nonpayable'
  >

  allowRecoverability: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    'view'
  >

  STAKING_ROUTER_ROLE: TypedContractMethod<[], [string], 'view'>

  addSigningKeysOperatorBH: TypedContractMethod<
    [
      _nodeOperatorId: BigNumberish,
      _keysCount: BigNumberish,
      _publicKeys: BytesLike,
      _signatures: BytesLike
    ],
    [void],
    'nonpayable'
  >

  appId: TypedContractMethod<[], [string], 'view'>

  getActiveNodeOperatorsCount: TypedContractMethod<[], [bigint], 'view'>

  addNodeOperator: TypedContractMethod<
    [_name: string, _rewardAddress: AddressLike],
    [bigint],
    'nonpayable'
  >

  getContractVersion: TypedContractMethod<[], [bigint], 'view'>

  getInitializationBlock: TypedContractMethod<[], [bigint], 'view'>

  getUnusedSigningKeyCount: TypedContractMethod<
    [_nodeOperatorId: BigNumberish],
    [bigint],
    'view'
  >

  onRewardsMinted: TypedContractMethod<[arg0: BigNumberish], [void], 'view'>

  MANAGE_NODE_OPERATOR_ROLE: TypedContractMethod<[], [string], 'view'>

  onWithdrawalCredentialsChanged: TypedContractMethod<[], [void], 'nonpayable'>

  activateNodeOperator: TypedContractMethod<
    [_nodeOperatorId: BigNumberish],
    [void],
    'nonpayable'
  >

  setNodeOperatorRewardAddress: TypedContractMethod<
    [_nodeOperatorId: BigNumberish, _rewardAddress: AddressLike],
    [void],
    'nonpayable'
  >

  getNodeOperator: TypedContractMethod<
    [_nodeOperatorId: BigNumberish, _fullInfo: boolean],
    [
      [boolean, string, string, bigint, bigint, bigint, bigint] & {
        active: boolean
        name: string
        rewardAddress: string
        totalVettedValidators: bigint
        totalExitedValidators: bigint
        totalAddedValidators: bigint
        totalDepositedValidators: bigint
      }
    ],
    'view'
  >

  finalizeUpgrade_v2: TypedContractMethod<
    [_locator: AddressLike, _type: BytesLike, _stuckPenaltyDelay: BigNumberish],
    [void],
    'nonpayable'
  >

  getStakingModuleSummary: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalExitedValidators: bigint
        totalDepositedValidators: bigint
        depositableValidatorsCount: bigint
      }
    ],
    'view'
  >

  updateExitedValidatorsCount: TypedContractMethod<
    [_nodeOperatorIds: BytesLike, _exitedValidatorsCounts: BytesLike],
    [void],
    'nonpayable'
  >

  updateStuckValidatorsCount: TypedContractMethod<
    [_nodeOperatorIds: BytesLike, _stuckValidatorsCounts: BytesLike],
    [void],
    'nonpayable'
  >

  transferToVault: TypedContractMethod<
    [_token: AddressLike],
    [void],
    'nonpayable'
  >

  canPerform: TypedContractMethod<
    [_sender: AddressLike, _role: BytesLike, _params: BigNumberish[]],
    [boolean],
    'view'
  >

  updateRefundedValidatorsCount: TypedContractMethod<
    [_nodeOperatorId: BigNumberish, _refundedValidatorsCount: BigNumberish],
    [void],
    'nonpayable'
  >

  getEVMScriptRegistry: TypedContractMethod<[], [string], 'view'>

  getNodeOperatorsCount: TypedContractMethod<[], [bigint], 'view'>

  updateTargetValidatorsLimits: TypedContractMethod<
    [
      _nodeOperatorId: BigNumberish,
      _isTargetLimitActive: boolean,
      _targetLimit: BigNumberish
    ],
    [void],
    'nonpayable'
  >

  setNodeOperatorStakingLimit: TypedContractMethod<
    [_nodeOperatorId: BigNumberish, _vettedSigningKeysCount: BigNumberish],
    [void],
    'nonpayable'
  >

  getNodeOperatorSummary: TypedContractMethod<
    [_nodeOperatorId: BigNumberish],
    [
      [boolean, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        isTargetLimitActive: boolean
        targetValidatorsCount: bigint
        stuckValidatorsCount: bigint
        refundedValidatorsCount: bigint
        stuckPenaltyEndTimestamp: bigint
        totalExitedValidators: bigint
        totalDepositedValidators: bigint
        depositableValidatorsCount: bigint
      }
    ],
    'view'
  >

  getSigningKey: TypedContractMethod<
    [_nodeOperatorId: BigNumberish, _index: BigNumberish],
    [
      [string, string, boolean] & {
        key: string
        depositSignature: string
        used: boolean
      }
    ],
    'view'
  >

  MAX_NODE_OPERATOR_NAME_LENGTH: TypedContractMethod<[], [bigint], 'view'>

  obtainDepositData: TypedContractMethod<
    [_depositsCount: BigNumberish, arg1: BytesLike],
    [[string, string] & { publicKeys: string; signatures: string }],
    'nonpayable'
  >

  getKeysOpIndex: TypedContractMethod<[], [bigint], 'view'>

  getNonce: TypedContractMethod<[], [bigint], 'view'>

  kernel: TypedContractMethod<[], [string], 'view'>

  getLocator: TypedContractMethod<[], [string], 'view'>

  SET_NODE_OPERATOR_LIMIT_ROLE: TypedContractMethod<[], [string], 'view'>

  getTotalSigningKeyCount: TypedContractMethod<
    [_nodeOperatorId: BigNumberish],
    [bigint],
    'view'
  >

  isPetrified: TypedContractMethod<[], [boolean], 'view'>

  MAX_STUCK_PENALTY_DELAY: TypedContractMethod<[], [bigint], 'view'>

  onExitedAndStuckValidatorsCountsUpdated: TypedContractMethod<
    [],
    [void],
    'nonpayable'
  >

  MAX_NODE_OPERATORS_COUNT: TypedContractMethod<[], [bigint], 'view'>

  removeSigningKeyOperatorBH: TypedContractMethod<
    [_nodeOperatorId: BigNumberish, _index: BigNumberish],
    [void],
    'nonpayable'
  >

  unsafeUpdateValidatorsCount: TypedContractMethod<
    [
      _nodeOperatorId: BigNumberish,
      _exitedValidatorsCount: BigNumberish,
      _stuckValidatorsCount: BigNumberish
    ],
    [void],
    'nonpayable'
  >

  MANAGE_SIGNING_KEYS: TypedContractMethod<[], [string], 'view'>

  isOperatorPenaltyCleared: TypedContractMethod<
    [_nodeOperatorId: BigNumberish],
    [boolean],
    'view'
  >

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T

  getFunction(
    nameOrSignature: 'hasInitialized'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'addSigningKeys'
  ): TypedContractMethod<
    [
      _nodeOperatorId: BigNumberish,
      _keysCount: BigNumberish,
      _publicKeys: BytesLike,
      _signatures: BytesLike
    ],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'getType'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'getEVMScriptExecutor'
  ): TypedContractMethod<[_script: BytesLike], [string], 'view'>
  getFunction(
    nameOrSignature: 'clearNodeOperatorPenalty'
  ): TypedContractMethod<
    [_nodeOperatorId: BigNumberish],
    [boolean],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'getRecoveryVault'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'getNodeOperatorIds'
  ): TypedContractMethod<
    [_offset: BigNumberish, _limit: BigNumberish],
    [bigint[]],
    'view'
  >
  getFunction(nameOrSignature: 'getSigningKeys'): TypedContractMethod<
    [
      _nodeOperatorId: BigNumberish,
      _offset: BigNumberish,
      _limit: BigNumberish
    ],
    [
      [string, string, boolean[]] & {
        pubkeys: string
        signatures: string
        used: boolean[]
      }
    ],
    'view'
  >
  getFunction(
    nameOrSignature: 'removeSigningKeysOperatorBH'
  ): TypedContractMethod<
    [
      _nodeOperatorId: BigNumberish,
      _fromIndex: BigNumberish,
      _keysCount: BigNumberish
    ],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'getNodeOperatorIsActive'
  ): TypedContractMethod<[_nodeOperatorId: BigNumberish], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'setNodeOperatorName'
  ): TypedContractMethod<
    [_nodeOperatorId: BigNumberish, _name: string],
    [void],
    'nonpayable'
  >
  getFunction(nameOrSignature: 'getRewardsDistribution'): TypedContractMethod<
    [_totalRewardShares: BigNumberish],
    [
      [string[], bigint[], boolean[]] & {
        recipients: string[]
        shares: bigint[]
        penalized: boolean[]
      }
    ],
    'view'
  >
  getFunction(
    nameOrSignature: 'invalidateReadyToDepositKeysRange'
  ): TypedContractMethod<
    [_indexFrom: BigNumberish, _indexTo: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<
    [_locator: AddressLike, _type: BytesLike, _stuckPenaltyDelay: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'setStuckPenaltyDelay'
  ): TypedContractMethod<[_delay: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'getStuckPenaltyDelay'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'removeSigningKey'
  ): TypedContractMethod<
    [_nodeOperatorId: BigNumberish, _index: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'removeSigningKeys'
  ): TypedContractMethod<
    [
      _nodeOperatorId: BigNumberish,
      _fromIndex: BigNumberish,
      _keysCount: BigNumberish
    ],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'isOperatorPenalized'
  ): TypedContractMethod<[_nodeOperatorId: BigNumberish], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'deactivateNodeOperator'
  ): TypedContractMethod<[_nodeOperatorId: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'allowRecoverability'
  ): TypedContractMethod<[token: AddressLike], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'STAKING_ROUTER_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'addSigningKeysOperatorBH'
  ): TypedContractMethod<
    [
      _nodeOperatorId: BigNumberish,
      _keysCount: BigNumberish,
      _publicKeys: BytesLike,
      _signatures: BytesLike
    ],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'appId'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'getActiveNodeOperatorsCount'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'addNodeOperator'
  ): TypedContractMethod<
    [_name: string, _rewardAddress: AddressLike],
    [bigint],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'getContractVersion'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'getInitializationBlock'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'getUnusedSigningKeyCount'
  ): TypedContractMethod<[_nodeOperatorId: BigNumberish], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'onRewardsMinted'
  ): TypedContractMethod<[arg0: BigNumberish], [void], 'view'>
  getFunction(
    nameOrSignature: 'MANAGE_NODE_OPERATOR_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'onWithdrawalCredentialsChanged'
  ): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'activateNodeOperator'
  ): TypedContractMethod<[_nodeOperatorId: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'setNodeOperatorRewardAddress'
  ): TypedContractMethod<
    [_nodeOperatorId: BigNumberish, _rewardAddress: AddressLike],
    [void],
    'nonpayable'
  >
  getFunction(nameOrSignature: 'getNodeOperator'): TypedContractMethod<
    [_nodeOperatorId: BigNumberish, _fullInfo: boolean],
    [
      [boolean, string, string, bigint, bigint, bigint, bigint] & {
        active: boolean
        name: string
        rewardAddress: string
        totalVettedValidators: bigint
        totalExitedValidators: bigint
        totalAddedValidators: bigint
        totalDepositedValidators: bigint
      }
    ],
    'view'
  >
  getFunction(
    nameOrSignature: 'finalizeUpgrade_v2'
  ): TypedContractMethod<
    [_locator: AddressLike, _type: BytesLike, _stuckPenaltyDelay: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(nameOrSignature: 'getStakingModuleSummary'): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalExitedValidators: bigint
        totalDepositedValidators: bigint
        depositableValidatorsCount: bigint
      }
    ],
    'view'
  >
  getFunction(
    nameOrSignature: 'updateExitedValidatorsCount'
  ): TypedContractMethod<
    [_nodeOperatorIds: BytesLike, _exitedValidatorsCounts: BytesLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'updateStuckValidatorsCount'
  ): TypedContractMethod<
    [_nodeOperatorIds: BytesLike, _stuckValidatorsCounts: BytesLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'transferToVault'
  ): TypedContractMethod<[_token: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'canPerform'
  ): TypedContractMethod<
    [_sender: AddressLike, _role: BytesLike, _params: BigNumberish[]],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'updateRefundedValidatorsCount'
  ): TypedContractMethod<
    [_nodeOperatorId: BigNumberish, _refundedValidatorsCount: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'getEVMScriptRegistry'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'getNodeOperatorsCount'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'updateTargetValidatorsLimits'
  ): TypedContractMethod<
    [
      _nodeOperatorId: BigNumberish,
      _isTargetLimitActive: boolean,
      _targetLimit: BigNumberish
    ],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'setNodeOperatorStakingLimit'
  ): TypedContractMethod<
    [_nodeOperatorId: BigNumberish, _vettedSigningKeysCount: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(nameOrSignature: 'getNodeOperatorSummary'): TypedContractMethod<
    [_nodeOperatorId: BigNumberish],
    [
      [boolean, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        isTargetLimitActive: boolean
        targetValidatorsCount: bigint
        stuckValidatorsCount: bigint
        refundedValidatorsCount: bigint
        stuckPenaltyEndTimestamp: bigint
        totalExitedValidators: bigint
        totalDepositedValidators: bigint
        depositableValidatorsCount: bigint
      }
    ],
    'view'
  >
  getFunction(nameOrSignature: 'getSigningKey'): TypedContractMethod<
    [_nodeOperatorId: BigNumberish, _index: BigNumberish],
    [
      [string, string, boolean] & {
        key: string
        depositSignature: string
        used: boolean
      }
    ],
    'view'
  >
  getFunction(
    nameOrSignature: 'MAX_NODE_OPERATOR_NAME_LENGTH'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'obtainDepositData'
  ): TypedContractMethod<
    [_depositsCount: BigNumberish, arg1: BytesLike],
    [[string, string] & { publicKeys: string; signatures: string }],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'getKeysOpIndex'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'getNonce'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'kernel'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'getLocator'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'SET_NODE_OPERATOR_LIMIT_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'getTotalSigningKeyCount'
  ): TypedContractMethod<[_nodeOperatorId: BigNumberish], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'isPetrified'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'MAX_STUCK_PENALTY_DELAY'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'onExitedAndStuckValidatorsCountsUpdated'
  ): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'MAX_NODE_OPERATORS_COUNT'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'removeSigningKeyOperatorBH'
  ): TypedContractMethod<
    [_nodeOperatorId: BigNumberish, _index: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'unsafeUpdateValidatorsCount'
  ): TypedContractMethod<
    [
      _nodeOperatorId: BigNumberish,
      _exitedValidatorsCount: BigNumberish,
      _stuckValidatorsCount: BigNumberish
    ],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'MANAGE_SIGNING_KEYS'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'isOperatorPenaltyCleared'
  ): TypedContractMethod<[_nodeOperatorId: BigNumberish], [boolean], 'view'>

  getEvent(
    key: 'NodeOperatorAdded'
  ): TypedContractEvent<
    NodeOperatorAddedEvent.InputTuple,
    NodeOperatorAddedEvent.OutputTuple,
    NodeOperatorAddedEvent.OutputObject
  >
  getEvent(
    key: 'NodeOperatorActiveSet'
  ): TypedContractEvent<
    NodeOperatorActiveSetEvent.InputTuple,
    NodeOperatorActiveSetEvent.OutputTuple,
    NodeOperatorActiveSetEvent.OutputObject
  >
  getEvent(
    key: 'NodeOperatorNameSet'
  ): TypedContractEvent<
    NodeOperatorNameSetEvent.InputTuple,
    NodeOperatorNameSetEvent.OutputTuple,
    NodeOperatorNameSetEvent.OutputObject
  >
  getEvent(
    key: 'NodeOperatorRewardAddressSet'
  ): TypedContractEvent<
    NodeOperatorRewardAddressSetEvent.InputTuple,
    NodeOperatorRewardAddressSetEvent.OutputTuple,
    NodeOperatorRewardAddressSetEvent.OutputObject
  >
  getEvent(
    key: 'NodeOperatorTotalKeysTrimmed'
  ): TypedContractEvent<
    NodeOperatorTotalKeysTrimmedEvent.InputTuple,
    NodeOperatorTotalKeysTrimmedEvent.OutputTuple,
    NodeOperatorTotalKeysTrimmedEvent.OutputObject
  >
  getEvent(
    key: 'KeysOpIndexSet'
  ): TypedContractEvent<
    KeysOpIndexSetEvent.InputTuple,
    KeysOpIndexSetEvent.OutputTuple,
    KeysOpIndexSetEvent.OutputObject
  >
  getEvent(
    key: 'StakingModuleTypeSet'
  ): TypedContractEvent<
    StakingModuleTypeSetEvent.InputTuple,
    StakingModuleTypeSetEvent.OutputTuple,
    StakingModuleTypeSetEvent.OutputObject
  >
  getEvent(
    key: 'RewardsDistributed'
  ): TypedContractEvent<
    RewardsDistributedEvent.InputTuple,
    RewardsDistributedEvent.OutputTuple,
    RewardsDistributedEvent.OutputObject
  >
  getEvent(
    key: 'LocatorContractSet'
  ): TypedContractEvent<
    LocatorContractSetEvent.InputTuple,
    LocatorContractSetEvent.OutputTuple,
    LocatorContractSetEvent.OutputObject
  >
  getEvent(
    key: 'VettedSigningKeysCountChanged'
  ): TypedContractEvent<
    VettedSigningKeysCountChangedEvent.InputTuple,
    VettedSigningKeysCountChangedEvent.OutputTuple,
    VettedSigningKeysCountChangedEvent.OutputObject
  >
  getEvent(
    key: 'DepositedSigningKeysCountChanged'
  ): TypedContractEvent<
    DepositedSigningKeysCountChangedEvent.InputTuple,
    DepositedSigningKeysCountChangedEvent.OutputTuple,
    DepositedSigningKeysCountChangedEvent.OutputObject
  >
  getEvent(
    key: 'ExitedSigningKeysCountChanged'
  ): TypedContractEvent<
    ExitedSigningKeysCountChangedEvent.InputTuple,
    ExitedSigningKeysCountChangedEvent.OutputTuple,
    ExitedSigningKeysCountChangedEvent.OutputObject
  >
  getEvent(
    key: 'TotalSigningKeysCountChanged'
  ): TypedContractEvent<
    TotalSigningKeysCountChangedEvent.InputTuple,
    TotalSigningKeysCountChangedEvent.OutputTuple,
    TotalSigningKeysCountChangedEvent.OutputObject
  >
  getEvent(
    key: 'NonceChanged'
  ): TypedContractEvent<
    NonceChangedEvent.InputTuple,
    NonceChangedEvent.OutputTuple,
    NonceChangedEvent.OutputObject
  >
  getEvent(
    key: 'StuckPenaltyDelayChanged'
  ): TypedContractEvent<
    StuckPenaltyDelayChangedEvent.InputTuple,
    StuckPenaltyDelayChangedEvent.OutputTuple,
    StuckPenaltyDelayChangedEvent.OutputObject
  >
  getEvent(
    key: 'StuckPenaltyStateChanged'
  ): TypedContractEvent<
    StuckPenaltyStateChangedEvent.InputTuple,
    StuckPenaltyStateChangedEvent.OutputTuple,
    StuckPenaltyStateChangedEvent.OutputObject
  >
  getEvent(
    key: 'TargetValidatorsCountChanged'
  ): TypedContractEvent<
    TargetValidatorsCountChangedEvent.InputTuple,
    TargetValidatorsCountChangedEvent.OutputTuple,
    TargetValidatorsCountChangedEvent.OutputObject
  >
  getEvent(
    key: 'NodeOperatorPenalized'
  ): TypedContractEvent<
    NodeOperatorPenalizedEvent.InputTuple,
    NodeOperatorPenalizedEvent.OutputTuple,
    NodeOperatorPenalizedEvent.OutputObject
  >
  getEvent(
    key: 'ContractVersionSet'
  ): TypedContractEvent<
    ContractVersionSetEvent.InputTuple,
    ContractVersionSetEvent.OutputTuple,
    ContractVersionSetEvent.OutputObject
  >
  getEvent(
    key: 'ScriptResult'
  ): TypedContractEvent<
    ScriptResultEvent.InputTuple,
    ScriptResultEvent.OutputTuple,
    ScriptResultEvent.OutputObject
  >
  getEvent(
    key: 'RecoverToVault'
  ): TypedContractEvent<
    RecoverToVaultEvent.InputTuple,
    RecoverToVaultEvent.OutputTuple,
    RecoverToVaultEvent.OutputObject
  >

  filters: {
    'NodeOperatorAdded(uint256,string,address,uint64)': TypedContractEvent<
      NodeOperatorAddedEvent.InputTuple,
      NodeOperatorAddedEvent.OutputTuple,
      NodeOperatorAddedEvent.OutputObject
    >
    NodeOperatorAdded: TypedContractEvent<
      NodeOperatorAddedEvent.InputTuple,
      NodeOperatorAddedEvent.OutputTuple,
      NodeOperatorAddedEvent.OutputObject
    >

    'NodeOperatorActiveSet(uint256,bool)': TypedContractEvent<
      NodeOperatorActiveSetEvent.InputTuple,
      NodeOperatorActiveSetEvent.OutputTuple,
      NodeOperatorActiveSetEvent.OutputObject
    >
    NodeOperatorActiveSet: TypedContractEvent<
      NodeOperatorActiveSetEvent.InputTuple,
      NodeOperatorActiveSetEvent.OutputTuple,
      NodeOperatorActiveSetEvent.OutputObject
    >

    'NodeOperatorNameSet(uint256,string)': TypedContractEvent<
      NodeOperatorNameSetEvent.InputTuple,
      NodeOperatorNameSetEvent.OutputTuple,
      NodeOperatorNameSetEvent.OutputObject
    >
    NodeOperatorNameSet: TypedContractEvent<
      NodeOperatorNameSetEvent.InputTuple,
      NodeOperatorNameSetEvent.OutputTuple,
      NodeOperatorNameSetEvent.OutputObject
    >

    'NodeOperatorRewardAddressSet(uint256,address)': TypedContractEvent<
      NodeOperatorRewardAddressSetEvent.InputTuple,
      NodeOperatorRewardAddressSetEvent.OutputTuple,
      NodeOperatorRewardAddressSetEvent.OutputObject
    >
    NodeOperatorRewardAddressSet: TypedContractEvent<
      NodeOperatorRewardAddressSetEvent.InputTuple,
      NodeOperatorRewardAddressSetEvent.OutputTuple,
      NodeOperatorRewardAddressSetEvent.OutputObject
    >

    'NodeOperatorTotalKeysTrimmed(uint256,uint64)': TypedContractEvent<
      NodeOperatorTotalKeysTrimmedEvent.InputTuple,
      NodeOperatorTotalKeysTrimmedEvent.OutputTuple,
      NodeOperatorTotalKeysTrimmedEvent.OutputObject
    >
    NodeOperatorTotalKeysTrimmed: TypedContractEvent<
      NodeOperatorTotalKeysTrimmedEvent.InputTuple,
      NodeOperatorTotalKeysTrimmedEvent.OutputTuple,
      NodeOperatorTotalKeysTrimmedEvent.OutputObject
    >

    'KeysOpIndexSet(uint256)': TypedContractEvent<
      KeysOpIndexSetEvent.InputTuple,
      KeysOpIndexSetEvent.OutputTuple,
      KeysOpIndexSetEvent.OutputObject
    >
    KeysOpIndexSet: TypedContractEvent<
      KeysOpIndexSetEvent.InputTuple,
      KeysOpIndexSetEvent.OutputTuple,
      KeysOpIndexSetEvent.OutputObject
    >

    'StakingModuleTypeSet(bytes32)': TypedContractEvent<
      StakingModuleTypeSetEvent.InputTuple,
      StakingModuleTypeSetEvent.OutputTuple,
      StakingModuleTypeSetEvent.OutputObject
    >
    StakingModuleTypeSet: TypedContractEvent<
      StakingModuleTypeSetEvent.InputTuple,
      StakingModuleTypeSetEvent.OutputTuple,
      StakingModuleTypeSetEvent.OutputObject
    >

    'RewardsDistributed(address,uint256)': TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >
    RewardsDistributed: TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >

    'LocatorContractSet(address)': TypedContractEvent<
      LocatorContractSetEvent.InputTuple,
      LocatorContractSetEvent.OutputTuple,
      LocatorContractSetEvent.OutputObject
    >
    LocatorContractSet: TypedContractEvent<
      LocatorContractSetEvent.InputTuple,
      LocatorContractSetEvent.OutputTuple,
      LocatorContractSetEvent.OutputObject
    >

    'VettedSigningKeysCountChanged(uint256,uint256)': TypedContractEvent<
      VettedSigningKeysCountChangedEvent.InputTuple,
      VettedSigningKeysCountChangedEvent.OutputTuple,
      VettedSigningKeysCountChangedEvent.OutputObject
    >
    VettedSigningKeysCountChanged: TypedContractEvent<
      VettedSigningKeysCountChangedEvent.InputTuple,
      VettedSigningKeysCountChangedEvent.OutputTuple,
      VettedSigningKeysCountChangedEvent.OutputObject
    >

    'DepositedSigningKeysCountChanged(uint256,uint256)': TypedContractEvent<
      DepositedSigningKeysCountChangedEvent.InputTuple,
      DepositedSigningKeysCountChangedEvent.OutputTuple,
      DepositedSigningKeysCountChangedEvent.OutputObject
    >
    DepositedSigningKeysCountChanged: TypedContractEvent<
      DepositedSigningKeysCountChangedEvent.InputTuple,
      DepositedSigningKeysCountChangedEvent.OutputTuple,
      DepositedSigningKeysCountChangedEvent.OutputObject
    >

    'ExitedSigningKeysCountChanged(uint256,uint256)': TypedContractEvent<
      ExitedSigningKeysCountChangedEvent.InputTuple,
      ExitedSigningKeysCountChangedEvent.OutputTuple,
      ExitedSigningKeysCountChangedEvent.OutputObject
    >
    ExitedSigningKeysCountChanged: TypedContractEvent<
      ExitedSigningKeysCountChangedEvent.InputTuple,
      ExitedSigningKeysCountChangedEvent.OutputTuple,
      ExitedSigningKeysCountChangedEvent.OutputObject
    >

    'TotalSigningKeysCountChanged(uint256,uint256)': TypedContractEvent<
      TotalSigningKeysCountChangedEvent.InputTuple,
      TotalSigningKeysCountChangedEvent.OutputTuple,
      TotalSigningKeysCountChangedEvent.OutputObject
    >
    TotalSigningKeysCountChanged: TypedContractEvent<
      TotalSigningKeysCountChangedEvent.InputTuple,
      TotalSigningKeysCountChangedEvent.OutputTuple,
      TotalSigningKeysCountChangedEvent.OutputObject
    >

    'NonceChanged(uint256)': TypedContractEvent<
      NonceChangedEvent.InputTuple,
      NonceChangedEvent.OutputTuple,
      NonceChangedEvent.OutputObject
    >
    NonceChanged: TypedContractEvent<
      NonceChangedEvent.InputTuple,
      NonceChangedEvent.OutputTuple,
      NonceChangedEvent.OutputObject
    >

    'StuckPenaltyDelayChanged(uint256)': TypedContractEvent<
      StuckPenaltyDelayChangedEvent.InputTuple,
      StuckPenaltyDelayChangedEvent.OutputTuple,
      StuckPenaltyDelayChangedEvent.OutputObject
    >
    StuckPenaltyDelayChanged: TypedContractEvent<
      StuckPenaltyDelayChangedEvent.InputTuple,
      StuckPenaltyDelayChangedEvent.OutputTuple,
      StuckPenaltyDelayChangedEvent.OutputObject
    >

    'StuckPenaltyStateChanged(uint256,uint256,uint256,uint256)': TypedContractEvent<
      StuckPenaltyStateChangedEvent.InputTuple,
      StuckPenaltyStateChangedEvent.OutputTuple,
      StuckPenaltyStateChangedEvent.OutputObject
    >
    StuckPenaltyStateChanged: TypedContractEvent<
      StuckPenaltyStateChangedEvent.InputTuple,
      StuckPenaltyStateChangedEvent.OutputTuple,
      StuckPenaltyStateChangedEvent.OutputObject
    >

    'TargetValidatorsCountChanged(uint256,uint256)': TypedContractEvent<
      TargetValidatorsCountChangedEvent.InputTuple,
      TargetValidatorsCountChangedEvent.OutputTuple,
      TargetValidatorsCountChangedEvent.OutputObject
    >
    TargetValidatorsCountChanged: TypedContractEvent<
      TargetValidatorsCountChangedEvent.InputTuple,
      TargetValidatorsCountChangedEvent.OutputTuple,
      TargetValidatorsCountChangedEvent.OutputObject
    >

    'NodeOperatorPenalized(address,uint256)': TypedContractEvent<
      NodeOperatorPenalizedEvent.InputTuple,
      NodeOperatorPenalizedEvent.OutputTuple,
      NodeOperatorPenalizedEvent.OutputObject
    >
    NodeOperatorPenalized: TypedContractEvent<
      NodeOperatorPenalizedEvent.InputTuple,
      NodeOperatorPenalizedEvent.OutputTuple,
      NodeOperatorPenalizedEvent.OutputObject
    >

    'ContractVersionSet(uint256)': TypedContractEvent<
      ContractVersionSetEvent.InputTuple,
      ContractVersionSetEvent.OutputTuple,
      ContractVersionSetEvent.OutputObject
    >
    ContractVersionSet: TypedContractEvent<
      ContractVersionSetEvent.InputTuple,
      ContractVersionSetEvent.OutputTuple,
      ContractVersionSetEvent.OutputObject
    >

    'ScriptResult(address,bytes,bytes,bytes)': TypedContractEvent<
      ScriptResultEvent.InputTuple,
      ScriptResultEvent.OutputTuple,
      ScriptResultEvent.OutputObject
    >
    ScriptResult: TypedContractEvent<
      ScriptResultEvent.InputTuple,
      ScriptResultEvent.OutputTuple,
      ScriptResultEvent.OutputObject
    >

    'RecoverToVault(address,address,uint256)': TypedContractEvent<
      RecoverToVaultEvent.InputTuple,
      RecoverToVaultEvent.OutputTuple,
      RecoverToVaultEvent.OutputObject
    >
    RecoverToVault: TypedContractEvent<
      RecoverToVaultEvent.InputTuple,
      RecoverToVaultEvent.OutputTuple,
      RecoverToVaultEvent.OutputObject
    >
  }
}
