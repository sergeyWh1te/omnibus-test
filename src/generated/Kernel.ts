/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common'

export interface KernelInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'hasInitialized'
      | 'KERNEL_APP_ID'
      | 'APP_ADDR_NAMESPACE'
      | 'getRecoveryVault'
      | 'newAppInstance(bytes32,address,bytes,bool)'
      | 'newAppInstance(bytes32,address)'
      | 'apps'
      | 'initialize'
      | 'CORE_NAMESPACE'
      | 'allowRecoverability'
      | 'recoveryVaultAppId'
      | 'getInitializationBlock'
      | 'setRecoveryVaultAppId'
      | 'APP_MANAGER_ROLE'
      | 'newPinnedAppInstance(bytes32,address)'
      | 'newPinnedAppInstance(bytes32,address,bytes,bool)'
      | 'transferToVault'
      | 'setApp'
      | 'getApp'
      | 'newAppProxyPinned(address,bytes32,bytes)'
      | 'newAppProxyPinned(address,bytes32)'
      | 'APP_BASES_NAMESPACE'
      | 'acl'
      | 'isPetrified'
      | 'newAppProxy(address,bytes32)'
      | 'newAppProxy(address,bytes32,bytes)'
      | 'DEFAULT_ACL_APP_ID'
      | 'hasPermission'
  ): FunctionFragment

  getEvent(
    nameOrSignatureOrTopic: 'NewAppProxy' | 'RecoverToVault' | 'SetApp'
  ): EventFragment

  encodeFunctionData(
    functionFragment: 'hasInitialized',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'KERNEL_APP_ID',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'APP_ADDR_NAMESPACE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getRecoveryVault',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'newAppInstance(bytes32,address,bytes,bool)',
    values: [BytesLike, AddressLike, BytesLike, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'newAppInstance(bytes32,address)',
    values: [BytesLike, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'apps',
    values: [BytesLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [AddressLike, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'CORE_NAMESPACE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'allowRecoverability',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'recoveryVaultAppId',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getInitializationBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setRecoveryVaultAppId',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'APP_MANAGER_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'newPinnedAppInstance(bytes32,address)',
    values: [BytesLike, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'newPinnedAppInstance(bytes32,address,bytes,bool)',
    values: [BytesLike, AddressLike, BytesLike, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'transferToVault',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'setApp',
    values: [BytesLike, BytesLike, AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getApp',
    values: [BytesLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'newAppProxyPinned(address,bytes32,bytes)',
    values: [AddressLike, BytesLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'newAppProxyPinned(address,bytes32)',
    values: [AddressLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'APP_BASES_NAMESPACE',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'acl', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'isPetrified',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'newAppProxy(address,bytes32)',
    values: [AddressLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'newAppProxy(address,bytes32,bytes)',
    values: [AddressLike, BytesLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'DEFAULT_ACL_APP_ID',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'hasPermission',
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string

  decodeFunctionResult(
    functionFragment: 'hasInitialized',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'KERNEL_APP_ID',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'APP_ADDR_NAMESPACE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRecoveryVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'newAppInstance(bytes32,address,bytes,bool)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'newAppInstance(bytes32,address)',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'apps', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'CORE_NAMESPACE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'allowRecoverability',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'recoveryVaultAppId',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getInitializationBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setRecoveryVaultAppId',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'APP_MANAGER_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'newPinnedAppInstance(bytes32,address)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'newPinnedAppInstance(bytes32,address,bytes,bool)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferToVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setApp', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getApp', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'newAppProxyPinned(address,bytes32,bytes)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'newAppProxyPinned(address,bytes32)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'APP_BASES_NAMESPACE',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'acl', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isPetrified', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'newAppProxy(address,bytes32)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'newAppProxy(address,bytes32,bytes)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'DEFAULT_ACL_APP_ID',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'hasPermission',
    data: BytesLike
  ): Result
}

export namespace NewAppProxyEvent {
  export type InputTuple = [
    proxy: AddressLike,
    isUpgradeable: boolean,
    appId: BytesLike
  ]
  export type OutputTuple = [
    proxy: string,
    isUpgradeable: boolean,
    appId: string
  ]
  export interface OutputObject {
    proxy: string
    isUpgradeable: boolean
    appId: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RecoverToVaultEvent {
  export type InputTuple = [
    vault: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ]
  export type OutputTuple = [vault: string, token: string, amount: bigint]
  export interface OutputObject {
    vault: string
    token: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SetAppEvent {
  export type InputTuple = [
    namespace_: BytesLike,
    appId: BytesLike,
    app: AddressLike
  ]
  export type OutputTuple = [namespace_: string, appId: string, app: string]
  export interface OutputObject {
    namespace: string
    appId: string
    app: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface Kernel extends BaseContract {
  connect(runner?: ContractRunner | null): Kernel
  waitForDeployment(): Promise<this>

  interface: KernelInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>

  hasInitialized: TypedContractMethod<[], [boolean], 'view'>

  KERNEL_APP_ID: TypedContractMethod<[], [string], 'view'>

  APP_ADDR_NAMESPACE: TypedContractMethod<[], [string], 'view'>

  getRecoveryVault: TypedContractMethod<[], [string], 'view'>

  'newAppInstance(bytes32,address,bytes,bool)': TypedContractMethod<
    [
      _appId: BytesLike,
      _appBase: AddressLike,
      _initializePayload: BytesLike,
      _setDefault: boolean
    ],
    [string],
    'nonpayable'
  >

  'newAppInstance(bytes32,address)': TypedContractMethod<
    [_appId: BytesLike, _appBase: AddressLike],
    [string],
    'nonpayable'
  >

  apps: TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [string],
    'view'
  >

  initialize: TypedContractMethod<
    [_baseAcl: AddressLike, _permissionsCreator: AddressLike],
    [void],
    'nonpayable'
  >

  CORE_NAMESPACE: TypedContractMethod<[], [string], 'view'>

  allowRecoverability: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    'view'
  >

  recoveryVaultAppId: TypedContractMethod<[], [string], 'view'>

  getInitializationBlock: TypedContractMethod<[], [bigint], 'view'>

  setRecoveryVaultAppId: TypedContractMethod<
    [_recoveryVaultAppId: BytesLike],
    [void],
    'nonpayable'
  >

  APP_MANAGER_ROLE: TypedContractMethod<[], [string], 'view'>

  'newPinnedAppInstance(bytes32,address)': TypedContractMethod<
    [_appId: BytesLike, _appBase: AddressLike],
    [string],
    'nonpayable'
  >

  'newPinnedAppInstance(bytes32,address,bytes,bool)': TypedContractMethod<
    [
      _appId: BytesLike,
      _appBase: AddressLike,
      _initializePayload: BytesLike,
      _setDefault: boolean
    ],
    [string],
    'nonpayable'
  >

  transferToVault: TypedContractMethod<
    [_token: AddressLike],
    [void],
    'nonpayable'
  >

  setApp: TypedContractMethod<
    [_namespace: BytesLike, _appId: BytesLike, _app: AddressLike],
    [void],
    'nonpayable'
  >

  getApp: TypedContractMethod<
    [_namespace: BytesLike, _appId: BytesLike],
    [string],
    'view'
  >

  'newAppProxyPinned(address,bytes32,bytes)': TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike, _initializePayload: BytesLike],
    [string],
    'nonpayable'
  >

  'newAppProxyPinned(address,bytes32)': TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike],
    [string],
    'nonpayable'
  >

  APP_BASES_NAMESPACE: TypedContractMethod<[], [string], 'view'>

  acl: TypedContractMethod<[], [string], 'view'>

  isPetrified: TypedContractMethod<[], [boolean], 'view'>

  'newAppProxy(address,bytes32)': TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike],
    [string],
    'nonpayable'
  >

  'newAppProxy(address,bytes32,bytes)': TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike, _initializePayload: BytesLike],
    [string],
    'nonpayable'
  >

  DEFAULT_ACL_APP_ID: TypedContractMethod<[], [string], 'view'>

  hasPermission: TypedContractMethod<
    [_who: AddressLike, _where: AddressLike, _what: BytesLike, _how: BytesLike],
    [boolean],
    'view'
  >

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T

  getFunction(
    nameOrSignature: 'hasInitialized'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'KERNEL_APP_ID'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'APP_ADDR_NAMESPACE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'getRecoveryVault'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'newAppInstance(bytes32,address,bytes,bool)'
  ): TypedContractMethod<
    [
      _appId: BytesLike,
      _appBase: AddressLike,
      _initializePayload: BytesLike,
      _setDefault: boolean
    ],
    [string],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'newAppInstance(bytes32,address)'
  ): TypedContractMethod<
    [_appId: BytesLike, _appBase: AddressLike],
    [string],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'apps'
  ): TypedContractMethod<[arg0: BytesLike, arg1: BytesLike], [string], 'view'>
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<
    [_baseAcl: AddressLike, _permissionsCreator: AddressLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'CORE_NAMESPACE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'allowRecoverability'
  ): TypedContractMethod<[token: AddressLike], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'recoveryVaultAppId'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'getInitializationBlock'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'setRecoveryVaultAppId'
  ): TypedContractMethod<[_recoveryVaultAppId: BytesLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'APP_MANAGER_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'newPinnedAppInstance(bytes32,address)'
  ): TypedContractMethod<
    [_appId: BytesLike, _appBase: AddressLike],
    [string],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'newPinnedAppInstance(bytes32,address,bytes,bool)'
  ): TypedContractMethod<
    [
      _appId: BytesLike,
      _appBase: AddressLike,
      _initializePayload: BytesLike,
      _setDefault: boolean
    ],
    [string],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'transferToVault'
  ): TypedContractMethod<[_token: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'setApp'
  ): TypedContractMethod<
    [_namespace: BytesLike, _appId: BytesLike, _app: AddressLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'getApp'
  ): TypedContractMethod<
    [_namespace: BytesLike, _appId: BytesLike],
    [string],
    'view'
  >
  getFunction(
    nameOrSignature: 'newAppProxyPinned(address,bytes32,bytes)'
  ): TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike, _initializePayload: BytesLike],
    [string],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'newAppProxyPinned(address,bytes32)'
  ): TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike],
    [string],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'APP_BASES_NAMESPACE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(nameOrSignature: 'acl'): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'isPetrified'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'newAppProxy(address,bytes32)'
  ): TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike],
    [string],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'newAppProxy(address,bytes32,bytes)'
  ): TypedContractMethod<
    [_kernel: AddressLike, _appId: BytesLike, _initializePayload: BytesLike],
    [string],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'DEFAULT_ACL_APP_ID'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'hasPermission'
  ): TypedContractMethod<
    [_who: AddressLike, _where: AddressLike, _what: BytesLike, _how: BytesLike],
    [boolean],
    'view'
  >

  getEvent(
    key: 'NewAppProxy'
  ): TypedContractEvent<
    NewAppProxyEvent.InputTuple,
    NewAppProxyEvent.OutputTuple,
    NewAppProxyEvent.OutputObject
  >
  getEvent(
    key: 'RecoverToVault'
  ): TypedContractEvent<
    RecoverToVaultEvent.InputTuple,
    RecoverToVaultEvent.OutputTuple,
    RecoverToVaultEvent.OutputObject
  >
  getEvent(
    key: 'SetApp'
  ): TypedContractEvent<
    SetAppEvent.InputTuple,
    SetAppEvent.OutputTuple,
    SetAppEvent.OutputObject
  >

  filters: {
    'NewAppProxy(address,bool,bytes32)': TypedContractEvent<
      NewAppProxyEvent.InputTuple,
      NewAppProxyEvent.OutputTuple,
      NewAppProxyEvent.OutputObject
    >
    NewAppProxy: TypedContractEvent<
      NewAppProxyEvent.InputTuple,
      NewAppProxyEvent.OutputTuple,
      NewAppProxyEvent.OutputObject
    >

    'RecoverToVault(address,address,uint256)': TypedContractEvent<
      RecoverToVaultEvent.InputTuple,
      RecoverToVaultEvent.OutputTuple,
      RecoverToVaultEvent.OutputObject
    >
    RecoverToVault: TypedContractEvent<
      RecoverToVaultEvent.InputTuple,
      RecoverToVaultEvent.OutputTuple,
      RecoverToVaultEvent.OutputObject
    >

    'SetApp(bytes32,bytes32,address)': TypedContractEvent<
      SetAppEvent.InputTuple,
      SetAppEvent.OutputTuple,
      SetAppEvent.OutputObject
    >
    SetApp: TypedContractEvent<
      SetAppEvent.InputTuple,
      SetAppEvent.OutputTuple,
      SetAppEvent.OutputObject
    >
  }
}
