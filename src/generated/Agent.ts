/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common'

export interface AgentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'ADD_PROTECTED_TOKEN_ROLE'
      | 'supportsInterface'
      | 'hasInitialized'
      | 'ERC1271_INTERFACE_ID'
      | 'onERC721Received'
      | 'isValidSignature(bytes32,bytes)'
      | 'isValidSignature(bytes,bytes)'
      | 'ERC1271_RETURN_INVALID_SIGNATURE'
      | 'TRANSFER_ROLE'
      | 'getProtectedTokensLength'
      | 'getEVMScriptExecutor'
      | 'getRecoveryVault'
      | 'RUN_SCRIPT_ROLE'
      | 'SAFE_EXECUTE_ROLE'
      | 'REMOVE_PROTECTED_TOKEN_ROLE'
      | 'deposit'
      | 'isDepositable'
      | 'presignHash'
      | 'DESIGNATE_SIGNER_ROLE'
      | 'removeProtectedToken'
      | 'EXECUTE_ROLE'
      | 'addProtectedToken'
      | 'allowRecoverability'
      | 'appId'
      | 'initialize'
      | 'protectedTokens'
      | 'getInitializationBlock'
      | 'ERC1271_RETURN_VALID_SIGNATURE'
      | 'transferToVault'
      | 'canPerform'
      | 'getEVMScriptRegistry'
      | 'setDesignatedSigner'
      | 'designatedSigner'
      | 'safeExecute'
      | 'PROTECTED_TOKENS_CAP'
      | 'ADD_PRESIGNED_HASH_ROLE'
      | 'isPresigned'
      | 'execute'
      | 'transfer'
      | 'canForward'
      | 'kernel'
      | 'forward'
      | 'isPetrified'
      | 'isForwarder'
  ): FunctionFragment

  getEvent(
    nameOrSignatureOrTopic:
      | 'SafeExecute'
      | 'Execute'
      | 'AddProtectedToken'
      | 'RemoveProtectedToken'
      | 'PresignHash'
      | 'SetDesignatedSigner'
      | 'ReceiveERC721'
      | 'VaultTransfer'
      | 'VaultDeposit'
      | 'ScriptResult'
      | 'RecoverToVault'
  ): EventFragment

  encodeFunctionData(
    functionFragment: 'ADD_PROTECTED_TOKEN_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'hasInitialized',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'ERC1271_INTERFACE_ID',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'onERC721Received',
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'isValidSignature(bytes32,bytes)',
    values: [BytesLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'isValidSignature(bytes,bytes)',
    values: [BytesLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'ERC1271_RETURN_INVALID_SIGNATURE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'TRANSFER_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getProtectedTokensLength',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getEVMScriptExecutor',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getRecoveryVault',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'RUN_SCRIPT_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'SAFE_EXECUTE_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'REMOVE_PROTECTED_TOKEN_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'isDepositable',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'presignHash',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'DESIGNATE_SIGNER_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'removeProtectedToken',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'EXECUTE_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'addProtectedToken',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'allowRecoverability',
    values: [AddressLike]
  ): string
  encodeFunctionData(functionFragment: 'appId', values?: undefined): string
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'protectedTokens',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getInitializationBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'ERC1271_RETURN_VALID_SIGNATURE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transferToVault',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'canPerform',
    values: [AddressLike, BytesLike, BigNumberish[]]
  ): string
  encodeFunctionData(
    functionFragment: 'getEVMScriptRegistry',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setDesignatedSigner',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'designatedSigner',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'safeExecute',
    values: [AddressLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'PROTECTED_TOKENS_CAP',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'ADD_PRESIGNED_HASH_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'isPresigned',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'execute',
    values: [AddressLike, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [AddressLike, AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'canForward',
    values: [AddressLike, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'kernel', values?: undefined): string
  encodeFunctionData(functionFragment: 'forward', values: [BytesLike]): string
  encodeFunctionData(
    functionFragment: 'isPetrified',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'isForwarder',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'ADD_PROTECTED_TOKEN_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'hasInitialized',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'ERC1271_INTERFACE_ID',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'onERC721Received',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'isValidSignature(bytes32,bytes)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'isValidSignature(bytes,bytes)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'ERC1271_RETURN_INVALID_SIGNATURE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'TRANSFER_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getProtectedTokensLength',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getEVMScriptExecutor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRecoveryVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'RUN_SCRIPT_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'SAFE_EXECUTE_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'REMOVE_PROTECTED_TOKEN_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isDepositable',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'presignHash', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'DESIGNATE_SIGNER_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'removeProtectedToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'EXECUTE_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'addProtectedToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'allowRecoverability',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'appId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'protectedTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getInitializationBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'ERC1271_RETURN_VALID_SIGNATURE',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferToVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'canPerform', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getEVMScriptRegistry',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setDesignatedSigner',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'designatedSigner',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'safeExecute', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'PROTECTED_TOKENS_CAP',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'ADD_PRESIGNED_HASH_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'isPresigned', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'execute', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'canForward', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'kernel', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'forward', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isPetrified', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isForwarder', data: BytesLike): Result
}

export namespace SafeExecuteEvent {
  export type InputTuple = [
    sender: AddressLike,
    target: AddressLike,
    data: BytesLike
  ]
  export type OutputTuple = [sender: string, target: string, data: string]
  export interface OutputObject {
    sender: string
    target: string
    data: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ExecuteEvent {
  export type InputTuple = [
    sender: AddressLike,
    target: AddressLike,
    ethValue: BigNumberish,
    data: BytesLike
  ]
  export type OutputTuple = [
    sender: string,
    target: string,
    ethValue: bigint,
    data: string
  ]
  export interface OutputObject {
    sender: string
    target: string
    ethValue: bigint
    data: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace AddProtectedTokenEvent {
  export type InputTuple = [token: AddressLike]
  export type OutputTuple = [token: string]
  export interface OutputObject {
    token: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RemoveProtectedTokenEvent {
  export type InputTuple = [token: AddressLike]
  export type OutputTuple = [token: string]
  export interface OutputObject {
    token: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace PresignHashEvent {
  export type InputTuple = [sender: AddressLike, hash: BytesLike]
  export type OutputTuple = [sender: string, hash: string]
  export interface OutputObject {
    sender: string
    hash: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SetDesignatedSignerEvent {
  export type InputTuple = [
    sender: AddressLike,
    oldSigner: AddressLike,
    newSigner: AddressLike
  ]
  export type OutputTuple = [
    sender: string,
    oldSigner: string,
    newSigner: string
  ]
  export interface OutputObject {
    sender: string
    oldSigner: string
    newSigner: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ReceiveERC721Event {
  export type InputTuple = [
    token: AddressLike,
    operator: AddressLike,
    from: AddressLike,
    tokenId: BigNumberish,
    data: BytesLike
  ]
  export type OutputTuple = [
    token: string,
    operator: string,
    from: string,
    tokenId: bigint,
    data: string
  ]
  export interface OutputObject {
    token: string
    operator: string
    from: string
    tokenId: bigint
    data: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace VaultTransferEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ]
  export type OutputTuple = [token: string, to: string, amount: bigint]
  export interface OutputObject {
    token: string
    to: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace VaultDepositEvent {
  export type InputTuple = [
    token: AddressLike,
    sender: AddressLike,
    amount: BigNumberish
  ]
  export type OutputTuple = [token: string, sender: string, amount: bigint]
  export interface OutputObject {
    token: string
    sender: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace ScriptResultEvent {
  export type InputTuple = [
    executor: AddressLike,
    script: BytesLike,
    input: BytesLike,
    returnData: BytesLike
  ]
  export type OutputTuple = [
    executor: string,
    script: string,
    input: string,
    returnData: string
  ]
  export interface OutputObject {
    executor: string
    script: string
    input: string
    returnData: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RecoverToVaultEvent {
  export type InputTuple = [
    vault: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ]
  export type OutputTuple = [vault: string, token: string, amount: bigint]
  export interface OutputObject {
    vault: string
    token: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface Agent extends BaseContract {
  connect(runner?: ContractRunner | null): Agent
  waitForDeployment(): Promise<this>

  interface: AgentInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>

  ADD_PROTECTED_TOKEN_ROLE: TypedContractMethod<[], [string], 'view'>

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    'view'
  >

  hasInitialized: TypedContractMethod<[], [boolean], 'view'>

  ERC1271_INTERFACE_ID: TypedContractMethod<[], [string], 'view'>

  onERC721Received: TypedContractMethod<
    [
      _operator: AddressLike,
      _from: AddressLike,
      _tokenId: BigNumberish,
      _data: BytesLike
    ],
    [string],
    'nonpayable'
  >

  'isValidSignature(bytes32,bytes)': TypedContractMethod<
    [_hash: BytesLike, _signature: BytesLike],
    [string],
    'view'
  >

  'isValidSignature(bytes,bytes)': TypedContractMethod<
    [_data: BytesLike, _signature: BytesLike],
    [string],
    'view'
  >

  ERC1271_RETURN_INVALID_SIGNATURE: TypedContractMethod<[], [string], 'view'>

  TRANSFER_ROLE: TypedContractMethod<[], [string], 'view'>

  getProtectedTokensLength: TypedContractMethod<[], [bigint], 'view'>

  getEVMScriptExecutor: TypedContractMethod<
    [_script: BytesLike],
    [string],
    'view'
  >

  getRecoveryVault: TypedContractMethod<[], [string], 'view'>

  RUN_SCRIPT_ROLE: TypedContractMethod<[], [string], 'view'>

  SAFE_EXECUTE_ROLE: TypedContractMethod<[], [string], 'view'>

  REMOVE_PROTECTED_TOKEN_ROLE: TypedContractMethod<[], [string], 'view'>

  deposit: TypedContractMethod<
    [_token: AddressLike, _value: BigNumberish],
    [void],
    'payable'
  >

  isDepositable: TypedContractMethod<[], [boolean], 'view'>

  presignHash: TypedContractMethod<[_hash: BytesLike], [void], 'nonpayable'>

  DESIGNATE_SIGNER_ROLE: TypedContractMethod<[], [string], 'view'>

  removeProtectedToken: TypedContractMethod<
    [_token: AddressLike],
    [void],
    'nonpayable'
  >

  EXECUTE_ROLE: TypedContractMethod<[], [string], 'view'>

  addProtectedToken: TypedContractMethod<
    [_token: AddressLike],
    [void],
    'nonpayable'
  >

  allowRecoverability: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    'view'
  >

  appId: TypedContractMethod<[], [string], 'view'>

  initialize: TypedContractMethod<[], [void], 'nonpayable'>

  protectedTokens: TypedContractMethod<[arg0: BigNumberish], [string], 'view'>

  getInitializationBlock: TypedContractMethod<[], [bigint], 'view'>

  ERC1271_RETURN_VALID_SIGNATURE: TypedContractMethod<[], [string], 'view'>

  transferToVault: TypedContractMethod<
    [_token: AddressLike],
    [void],
    'nonpayable'
  >

  canPerform: TypedContractMethod<
    [_sender: AddressLike, _role: BytesLike, _params: BigNumberish[]],
    [boolean],
    'view'
  >

  getEVMScriptRegistry: TypedContractMethod<[], [string], 'view'>

  setDesignatedSigner: TypedContractMethod<
    [_designatedSigner: AddressLike],
    [void],
    'nonpayable'
  >

  designatedSigner: TypedContractMethod<[], [string], 'view'>

  safeExecute: TypedContractMethod<
    [_target: AddressLike, _data: BytesLike],
    [void],
    'nonpayable'
  >

  PROTECTED_TOKENS_CAP: TypedContractMethod<[], [bigint], 'view'>

  ADD_PRESIGNED_HASH_ROLE: TypedContractMethod<[], [string], 'view'>

  isPresigned: TypedContractMethod<[arg0: BytesLike], [boolean], 'view'>

  execute: TypedContractMethod<
    [_target: AddressLike, _ethValue: BigNumberish, _data: BytesLike],
    [void],
    'nonpayable'
  >

  transfer: TypedContractMethod<
    [_token: AddressLike, _to: AddressLike, _value: BigNumberish],
    [void],
    'nonpayable'
  >

  canForward: TypedContractMethod<
    [_sender: AddressLike, _evmScript: BytesLike],
    [boolean],
    'view'
  >

  kernel: TypedContractMethod<[], [string], 'view'>

  forward: TypedContractMethod<[_evmScript: BytesLike], [void], 'nonpayable'>

  isPetrified: TypedContractMethod<[], [boolean], 'view'>

  isForwarder: TypedContractMethod<[], [boolean], 'view'>

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T

  getFunction(
    nameOrSignature: 'ADD_PROTECTED_TOKEN_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'supportsInterface'
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'hasInitialized'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'ERC1271_INTERFACE_ID'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'onERC721Received'
  ): TypedContractMethod<
    [
      _operator: AddressLike,
      _from: AddressLike,
      _tokenId: BigNumberish,
      _data: BytesLike
    ],
    [string],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'isValidSignature(bytes32,bytes)'
  ): TypedContractMethod<
    [_hash: BytesLike, _signature: BytesLike],
    [string],
    'view'
  >
  getFunction(
    nameOrSignature: 'isValidSignature(bytes,bytes)'
  ): TypedContractMethod<
    [_data: BytesLike, _signature: BytesLike],
    [string],
    'view'
  >
  getFunction(
    nameOrSignature: 'ERC1271_RETURN_INVALID_SIGNATURE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'TRANSFER_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'getProtectedTokensLength'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'getEVMScriptExecutor'
  ): TypedContractMethod<[_script: BytesLike], [string], 'view'>
  getFunction(
    nameOrSignature: 'getRecoveryVault'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'RUN_SCRIPT_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'SAFE_EXECUTE_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'REMOVE_PROTECTED_TOKEN_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'deposit'
  ): TypedContractMethod<
    [_token: AddressLike, _value: BigNumberish],
    [void],
    'payable'
  >
  getFunction(
    nameOrSignature: 'isDepositable'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'presignHash'
  ): TypedContractMethod<[_hash: BytesLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'DESIGNATE_SIGNER_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'removeProtectedToken'
  ): TypedContractMethod<[_token: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'EXECUTE_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'addProtectedToken'
  ): TypedContractMethod<[_token: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'allowRecoverability'
  ): TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'appId'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'protectedTokens'
  ): TypedContractMethod<[arg0: BigNumberish], [string], 'view'>
  getFunction(
    nameOrSignature: 'getInitializationBlock'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'ERC1271_RETURN_VALID_SIGNATURE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'transferToVault'
  ): TypedContractMethod<[_token: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'canPerform'
  ): TypedContractMethod<
    [_sender: AddressLike, _role: BytesLike, _params: BigNumberish[]],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'getEVMScriptRegistry'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'setDesignatedSigner'
  ): TypedContractMethod<[_designatedSigner: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'designatedSigner'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'safeExecute'
  ): TypedContractMethod<
    [_target: AddressLike, _data: BytesLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'PROTECTED_TOKENS_CAP'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'ADD_PRESIGNED_HASH_ROLE'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'isPresigned'
  ): TypedContractMethod<[arg0: BytesLike], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'execute'
  ): TypedContractMethod<
    [_target: AddressLike, _ethValue: BigNumberish, _data: BytesLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'transfer'
  ): TypedContractMethod<
    [_token: AddressLike, _to: AddressLike, _value: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'canForward'
  ): TypedContractMethod<
    [_sender: AddressLike, _evmScript: BytesLike],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'kernel'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'forward'
  ): TypedContractMethod<[_evmScript: BytesLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'isPetrified'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'isForwarder'
  ): TypedContractMethod<[], [boolean], 'view'>

  getEvent(
    key: 'SafeExecute'
  ): TypedContractEvent<
    SafeExecuteEvent.InputTuple,
    SafeExecuteEvent.OutputTuple,
    SafeExecuteEvent.OutputObject
  >
  getEvent(
    key: 'Execute'
  ): TypedContractEvent<
    ExecuteEvent.InputTuple,
    ExecuteEvent.OutputTuple,
    ExecuteEvent.OutputObject
  >
  getEvent(
    key: 'AddProtectedToken'
  ): TypedContractEvent<
    AddProtectedTokenEvent.InputTuple,
    AddProtectedTokenEvent.OutputTuple,
    AddProtectedTokenEvent.OutputObject
  >
  getEvent(
    key: 'RemoveProtectedToken'
  ): TypedContractEvent<
    RemoveProtectedTokenEvent.InputTuple,
    RemoveProtectedTokenEvent.OutputTuple,
    RemoveProtectedTokenEvent.OutputObject
  >
  getEvent(
    key: 'PresignHash'
  ): TypedContractEvent<
    PresignHashEvent.InputTuple,
    PresignHashEvent.OutputTuple,
    PresignHashEvent.OutputObject
  >
  getEvent(
    key: 'SetDesignatedSigner'
  ): TypedContractEvent<
    SetDesignatedSignerEvent.InputTuple,
    SetDesignatedSignerEvent.OutputTuple,
    SetDesignatedSignerEvent.OutputObject
  >
  getEvent(
    key: 'ReceiveERC721'
  ): TypedContractEvent<
    ReceiveERC721Event.InputTuple,
    ReceiveERC721Event.OutputTuple,
    ReceiveERC721Event.OutputObject
  >
  getEvent(
    key: 'VaultTransfer'
  ): TypedContractEvent<
    VaultTransferEvent.InputTuple,
    VaultTransferEvent.OutputTuple,
    VaultTransferEvent.OutputObject
  >
  getEvent(
    key: 'VaultDeposit'
  ): TypedContractEvent<
    VaultDepositEvent.InputTuple,
    VaultDepositEvent.OutputTuple,
    VaultDepositEvent.OutputObject
  >
  getEvent(
    key: 'ScriptResult'
  ): TypedContractEvent<
    ScriptResultEvent.InputTuple,
    ScriptResultEvent.OutputTuple,
    ScriptResultEvent.OutputObject
  >
  getEvent(
    key: 'RecoverToVault'
  ): TypedContractEvent<
    RecoverToVaultEvent.InputTuple,
    RecoverToVaultEvent.OutputTuple,
    RecoverToVaultEvent.OutputObject
  >

  filters: {
    'SafeExecute(address,address,bytes)': TypedContractEvent<
      SafeExecuteEvent.InputTuple,
      SafeExecuteEvent.OutputTuple,
      SafeExecuteEvent.OutputObject
    >
    SafeExecute: TypedContractEvent<
      SafeExecuteEvent.InputTuple,
      SafeExecuteEvent.OutputTuple,
      SafeExecuteEvent.OutputObject
    >

    'Execute(address,address,uint256,bytes)': TypedContractEvent<
      ExecuteEvent.InputTuple,
      ExecuteEvent.OutputTuple,
      ExecuteEvent.OutputObject
    >
    Execute: TypedContractEvent<
      ExecuteEvent.InputTuple,
      ExecuteEvent.OutputTuple,
      ExecuteEvent.OutputObject
    >

    'AddProtectedToken(address)': TypedContractEvent<
      AddProtectedTokenEvent.InputTuple,
      AddProtectedTokenEvent.OutputTuple,
      AddProtectedTokenEvent.OutputObject
    >
    AddProtectedToken: TypedContractEvent<
      AddProtectedTokenEvent.InputTuple,
      AddProtectedTokenEvent.OutputTuple,
      AddProtectedTokenEvent.OutputObject
    >

    'RemoveProtectedToken(address)': TypedContractEvent<
      RemoveProtectedTokenEvent.InputTuple,
      RemoveProtectedTokenEvent.OutputTuple,
      RemoveProtectedTokenEvent.OutputObject
    >
    RemoveProtectedToken: TypedContractEvent<
      RemoveProtectedTokenEvent.InputTuple,
      RemoveProtectedTokenEvent.OutputTuple,
      RemoveProtectedTokenEvent.OutputObject
    >

    'PresignHash(address,bytes32)': TypedContractEvent<
      PresignHashEvent.InputTuple,
      PresignHashEvent.OutputTuple,
      PresignHashEvent.OutputObject
    >
    PresignHash: TypedContractEvent<
      PresignHashEvent.InputTuple,
      PresignHashEvent.OutputTuple,
      PresignHashEvent.OutputObject
    >

    'SetDesignatedSigner(address,address,address)': TypedContractEvent<
      SetDesignatedSignerEvent.InputTuple,
      SetDesignatedSignerEvent.OutputTuple,
      SetDesignatedSignerEvent.OutputObject
    >
    SetDesignatedSigner: TypedContractEvent<
      SetDesignatedSignerEvent.InputTuple,
      SetDesignatedSignerEvent.OutputTuple,
      SetDesignatedSignerEvent.OutputObject
    >

    'ReceiveERC721(address,address,address,uint256,bytes)': TypedContractEvent<
      ReceiveERC721Event.InputTuple,
      ReceiveERC721Event.OutputTuple,
      ReceiveERC721Event.OutputObject
    >
    ReceiveERC721: TypedContractEvent<
      ReceiveERC721Event.InputTuple,
      ReceiveERC721Event.OutputTuple,
      ReceiveERC721Event.OutputObject
    >

    'VaultTransfer(address,address,uint256)': TypedContractEvent<
      VaultTransferEvent.InputTuple,
      VaultTransferEvent.OutputTuple,
      VaultTransferEvent.OutputObject
    >
    VaultTransfer: TypedContractEvent<
      VaultTransferEvent.InputTuple,
      VaultTransferEvent.OutputTuple,
      VaultTransferEvent.OutputObject
    >

    'VaultDeposit(address,address,uint256)': TypedContractEvent<
      VaultDepositEvent.InputTuple,
      VaultDepositEvent.OutputTuple,
      VaultDepositEvent.OutputObject
    >
    VaultDeposit: TypedContractEvent<
      VaultDepositEvent.InputTuple,
      VaultDepositEvent.OutputTuple,
      VaultDepositEvent.OutputObject
    >

    'ScriptResult(address,bytes,bytes,bytes)': TypedContractEvent<
      ScriptResultEvent.InputTuple,
      ScriptResultEvent.OutputTuple,
      ScriptResultEvent.OutputObject
    >
    ScriptResult: TypedContractEvent<
      ScriptResultEvent.InputTuple,
      ScriptResultEvent.OutputTuple,
      ScriptResultEvent.OutputObject
    >

    'RecoverToVault(address,address,uint256)': TypedContractEvent<
      RecoverToVaultEvent.InputTuple,
      RecoverToVaultEvent.OutputTuple,
      RecoverToVaultEvent.OutputObject
    >
    RecoverToVault: TypedContractEvent<
      RecoverToVaultEvent.InputTuple,
      RecoverToVaultEvent.OutputTuple,
      RecoverToVaultEvent.OutputObject
    >
  }
}
